import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,f as o}from"./app-BGAn4IFu.js";const t={},p=o(`<div class="hint-container tip"><p class="hint-container-title">提示</p><p>Symbol是ES6中引入的一种新的原始数据类型。它是一种唯一且不可变的值，用于标识对象的属性。Symbol的主要特点是它的值是唯一的，即使创建多个具有相同描述的Symbol，它们也是不相等的。</p></div><p>要创建一个Symbol，可以使用全局的Symbol函数，并可选地传入一个描述符字符串作为参数：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> symbol1 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> symbol2 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;description&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> symbol1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：symbol</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>symbol1 <span class="token operator">!==</span> symbol2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Symbol可以用作对象的属性键，以确保属性的唯一性。使用Symbol作为属性键时，需要使用方括号语法来访问属性：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> mySymbol <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;mySymbol&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span>mySymbol<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">&#39;value&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>mySymbol<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：value</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Symbol还提供了一些内置的属性，如<code>Symbol.iterator</code>用于定义对象的默认迭代器，以及<code>Symbol.hasInstance</code>用于定义对象的instanceof操作符行为。此外，ES6还提供了一系列内置的Symbol常量，如<code>Symbol.iterator</code>、<code>Symbol.match</code>、<code>Symbol.replace</code>等。</p><p>总而言之，Symbol是一种新的原始数据类型，用于创建唯一且不可变的标识符。它在创建唯一键值、定义对象行为等方面非常有用。</p><blockquote><p>Symbol的其他一些重要特性和应用：</p></blockquote><ol><li><p>全局Symbol注册表（Global Symbol Registry）： 在全局Symbol注册表中，可以注册全局可访问的Symbol，并根据提供的描述符字符串检索它们。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> symbol1 <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">&#39;key1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> symbol2 <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">&#39;key1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>symbol1 <span class="token operator">===</span> symbol2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：true</span>

<span class="token keyword">const</span> key <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token function">keyFor</span><span class="token punctuation">(</span>symbol1<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：key1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用<code>Symbol.for()</code>方法可以创建一个全局注册的Symbol，如果之前已经有相同描述的注册Symbol存在，则返回已存在的Symbol。使用<code>Symbol.keyFor()</code>方法可以获取一个全局Symbol的描述符字符串。</p></li><li><p>Symbol的迭代和反射： Symbol拥有自己的内置属性，例如<code>Symbol.iterator</code>用于定义自定义对象的迭代器，以及<code>Symbol.reflect</code>用于访问对象的反射元信息。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> mySymbol <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;mySymbol&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span>mySymbol<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">&#39;hidden&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：a, b</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> symbols <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertySymbols</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>symbols<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：[Symbol(mySymbol)]</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Reflect<span class="token punctuation">.</span><span class="token function">ownKeys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：[&quot;a&quot;, &quot;b&quot;, Symbol(mySymbol)]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在迭代对象的属性时，使用<code>for...in</code>循环只能获取普通的键，而使用<code>Object.getOwnPropertySymbols()</code>可以获取对象上的Symbol键。<code>Reflect.ownKeys()</code>方法返回对象的所有键，包括普通键和Symbol键。</p></li><li><p>Symbol的内置常量： ES6提供了一些内置的Symbol常量，这些常量在语言中扮演着特殊的角色，例如<code>Symbol.iterator</code>、<code>Symbol.match</code>、<code>Symbol.replace</code>等。它们用于定义特定的操作行为和功能。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 内置Symbol常量用于迭代</span>

<span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">pattern</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regex<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>match<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 内置Symbol常量用于正则匹配</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>Symbol的应用非常广泛，可以用于创建唯一的属性键，定义对象行为，管理全局Symbol，以及访问内置的Symbol常量。它为开发人员提供了更大的灵活性和控制力。</p>`,10),e=[p];function c(l,i){return s(),a("div",null,e)}const m=n(t,[["render",c],["__file","symbol.html.vue"]]),k=JSON.parse(`{"path":"/js/es/symbol.html","title":"Symbol","lang":"zh-CN","frontmatter":{"title":"Symbol","icon":"symbol","category":"Javascript","order":12,"description":"提示 Symbol是ES6中引入的一种新的原始数据类型。它是一种唯一且不可变的值，用于标识对象的属性。Symbol的主要特点是它的值是唯一的，即使创建多个具有相同描述的Symbol，它们也是不相等的。 要创建一个Symbol，可以使用全局的Symbol函数，并可选地传入一个描述符字符串作为参数： Symbol可以用作对象的属性键，以确保属性的唯一性。使...","head":[["meta",{"property":"og:url","content":"https://github.com/newNotes/js/es/symbol.html"}],["meta",{"property":"og:site_name","content":"ZY 学习笔记"}],["meta",{"property":"og:title","content":"Symbol"}],["meta",{"property":"og:description","content":"提示 Symbol是ES6中引入的一种新的原始数据类型。它是一种唯一且不可变的值，用于标识对象的属性。Symbol的主要特点是它的值是唯一的，即使创建多个具有相同描述的Symbol，它们也是不相等的。 要创建一个Symbol，可以使用全局的Symbol函数，并可选地传入一个描述符字符串作为参数： Symbol可以用作对象的属性键，以确保属性的唯一性。使..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-23T14:28:05.000Z"}],["meta",{"property":"article:author","content":"flow-zy"}],["meta",{"property":"article:modified_time","content":"2024-06-23T14:28:05.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Symbol\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-23T14:28:05.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"flow-zy\\",\\"url\\":\\"https://flow-zy.github.io/newNotes/\\"}]}"]]},"headers":[],"git":{"createdTime":1719152885000,"updatedTime":1719152885000,"contributors":[{"name":"overflow_z","email":"wz19121@eyeah.net","commits":1}]},"readingTime":{"minutes":2.54,"words":763},"filePathRelative":"js/es/symbol.md","localizedDate":"2024年6月23日","excerpt":"<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">提示</p>\\n<p>Symbol是ES6中引入的一种新的原始数据类型。它是一种唯一且不可变的值，用于标识对象的属性。Symbol的主要特点是它的值是唯一的，即使创建多个具有相同描述的Symbol，它们也是不相等的。</p>\\n</div>\\n<p>要创建一个Symbol，可以使用全局的Symbol函数，并可选地传入一个描述符字符串作为参数：</p>\\n<div class=\\"language-javascript\\" data-ext=\\"js\\" data-title=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">const</span> symbol1 <span class=\\"token operator\\">=</span> <span class=\\"token function\\">Symbol</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">const</span> symbol2 <span class=\\"token operator\\">=</span> <span class=\\"token function\\">Symbol</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'description'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\nconsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">typeof</span> symbol1<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 输出：symbol</span>\\nconsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>symbol1 <span class=\\"token operator\\">!==</span> symbol2<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 输出：true</span>\\n</code></pre></div>","autoDesc":true}`);export{m as comp,k as data};
