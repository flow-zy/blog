import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,f as e}from"./app-D__VP-01.js";const t={},p=e(`<div class="hint-container tip"><p class="hint-container-title">提示</p><p>ES6对正则表达式进行了一些拓展和增强。</p></div><ol><li><p>正则表达式的构造函数：</p><ul><li>ES6引入了<code>RegExp</code>构造函数的扩展，允许使用正则表达式作为参数创建新的正则对象。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">&quot;\\\\w+&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;gi&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// /\\w+/gi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>正则表达式的修饰符：</p><ul><li>ES6允许在正则表达式字面量中使用修饰符u，用于处理Unicode字符。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&quot;你好，Hello&quot;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\w+</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&quot;你好&quot;, &quot;Hello&quot;]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\w+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">u</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&quot;你好&quot;, &quot;Hello&quot;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>正则表达式的新增方法：</p><ul><li>ES6为正则表达式对象添加了一些新的方法。</li><li><code>RegExp.prototype.flags</code>：返回正则表达式的修饰符字符串。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\w+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gi</span></span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regex<span class="token punctuation">.</span>flags<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;gi&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>正则表达式的新增修饰符：</p><ul><li>ES6引入了两个新的正则表达式修饰符。</li><li><code>y</code>修饰符（粘连修饰符）：确保匹配从目标字符串的当前位置开始，实现精确匹配。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&quot;abcabcabc&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">abc</span><span class="token regex-delimiter">/</span><span class="token regex-flags">y</span></span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regex<span class="token punctuation">.</span>lastIndex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regex<span class="token punctuation">.</span>lastIndex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>s</code>修饰符（单行修饰符）：使点字符<code>.</code>能够匹配包括换行符在内的所有字符。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&quot;foo\\nbar&quot;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">foo.bar</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">foo.bar</span><span class="token regex-delimiter">/</span><span class="token regex-flags">s</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>正则表达式的新增属性：</p><ul><li>ES6为正则表达式对象添加了两个新的属性。</li><li><code>RegExp.prototype.sticky</code>：判断正则表达式是否开启了粘连修饰符。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">abc</span><span class="token regex-delimiter">/</span><span class="token regex-flags">y</span></span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regex<span class="token punctuation">.</span>sticky<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>RegExp.prototype.unicode</code>：判断正则表达式是否开启了Unicode修饰符。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">abc</span><span class="token regex-delimiter">/</span><span class="token regex-flags">u</span></span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regex<span class="token punctuation">.</span>unicode<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ol>`,2),o=[p];function c(l,i){return s(),a("div",null,o)}const k=n(t,[["render",c],["__file","regexp.html.vue"]]),g=JSON.parse('{"path":"/js/es/regexp.html","title":"正则表达式","lang":"zh-CN","frontmatter":{"title":"正则表达式","icon":"regex","category":"JavaScript","order":11,"description":"提示 ES6对正则表达式进行了一些拓展和增强。 正则表达式的构造函数： ES6引入了RegExp构造函数的扩展，允许使用正则表达式作为参数创建新的正则对象。 正则表达式的修饰符： ES6允许在正则表达式字面量中使用修饰符u，用于处理Unicode字符。 正则表达式的新增方法： ES6为正则表达式对象添加了一些新的方法。 RegExp.prototype...","head":[["meta",{"property":"og:url","content":"https://github.com/blog/js/es/regexp.html"}],["meta",{"property":"og:site_name","content":"ZY 学习笔记"}],["meta",{"property":"og:title","content":"正则表达式"}],["meta",{"property":"og:description","content":"提示 ES6对正则表达式进行了一些拓展和增强。 正则表达式的构造函数： ES6引入了RegExp构造函数的扩展，允许使用正则表达式作为参数创建新的正则对象。 正则表达式的修饰符： ES6允许在正则表达式字面量中使用修饰符u，用于处理Unicode字符。 正则表达式的新增方法： ES6为正则表达式对象添加了一些新的方法。 RegExp.prototype..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-23T14:28:05.000Z"}],["meta",{"property":"article:author","content":"flow-zy"}],["meta",{"property":"article:modified_time","content":"2024-06-23T14:28:05.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"正则表达式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-23T14:28:05.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"flow-zy\\",\\"url\\":\\"https://flow-zy.github.io/newNotes/\\"}]}"]]},"headers":[],"git":{"createdTime":1719152885000,"updatedTime":1719152885000,"contributors":[{"name":"overflow_z","email":"wz19121@eyeah.net","commits":1}]},"readingTime":{"minutes":1.35,"words":406},"filePathRelative":"js/es/regexp.md","localizedDate":"2024年6月23日","excerpt":"<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">提示</p>\\n<p>ES6对正则表达式进行了一些拓展和增强。</p>\\n</div>\\n<ol>\\n<li>\\n<p>正则表达式的构造函数：</p>\\n<ul>\\n<li>ES6引入了<code>RegExp</code>构造函数的扩展，允许使用正则表达式作为参数创建新的正则对象。</li>\\n</ul>\\n<div class=\\"language-javascript\\" data-ext=\\"js\\" data-title=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">const</span> regex <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">RegExp</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"\\\\\\\\w+\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"gi\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\nconsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>regex<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// /\\\\w+/gi</span>\\n</code></pre></div></li>\\n<li>\\n<p>正则表达式的修饰符：</p>\\n<ul>\\n<li>ES6允许在正则表达式字面量中使用修饰符u，用于处理Unicode字符。</li>\\n</ul>\\n<div class=\\"language-javascript\\" data-ext=\\"js\\" data-title=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">const</span> str <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"你好，Hello\\"</span><span class=\\"token punctuation\\">;</span>\\nconsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>str<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">match</span><span class=\\"token punctuation\\">(</span><span class=\\"token regex\\"><span class=\\"token regex-delimiter\\">/</span><span class=\\"token regex-source language-regex\\">\\\\w+</span><span class=\\"token regex-delimiter\\">/</span></span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// [\\"你好\\", \\"Hello\\"]</span>\\nconsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>str<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">match</span><span class=\\"token punctuation\\">(</span><span class=\\"token regex\\"><span class=\\"token regex-delimiter\\">/</span><span class=\\"token regex-source language-regex\\">\\\\w+</span><span class=\\"token regex-delimiter\\">/</span><span class=\\"token regex-flags\\">u</span></span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// [\\"你好\\", \\"Hello\\"]</span>\\n</code></pre></div></li>\\n<li>\\n<p>正则表达式的新增方法：</p>\\n<ul>\\n<li>ES6为正则表达式对象添加了一些新的方法。</li>\\n<li><code>RegExp.prototype.flags</code>：返回正则表达式的修饰符字符串。</li>\\n</ul>\\n<div class=\\"language-javascript\\" data-ext=\\"js\\" data-title=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">const</span> regex <span class=\\"token operator\\">=</span> <span class=\\"token regex\\"><span class=\\"token regex-delimiter\\">/</span><span class=\\"token regex-source language-regex\\">\\\\w+</span><span class=\\"token regex-delimiter\\">/</span><span class=\\"token regex-flags\\">gi</span></span><span class=\\"token punctuation\\">;</span>\\nconsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>regex<span class=\\"token punctuation\\">.</span>flags<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// \\"gi\\"</span>\\n</code></pre></div></li>\\n<li>\\n<p>正则表达式的新增修饰符：</p>\\n<ul>\\n<li>ES6引入了两个新的正则表达式修饰符。</li>\\n<li><code>y</code>修饰符（粘连修饰符）：确保匹配从目标字符串的当前位置开始，实现精确匹配。</li>\\n</ul>\\n<div class=\\"language-javascript\\" data-ext=\\"js\\" data-title=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">const</span> str <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"abcabcabc\\"</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">const</span> regex <span class=\\"token operator\\">=</span> <span class=\\"token regex\\"><span class=\\"token regex-delimiter\\">/</span><span class=\\"token regex-source language-regex\\">abc</span><span class=\\"token regex-delimiter\\">/</span><span class=\\"token regex-flags\\">y</span></span><span class=\\"token punctuation\\">;</span>\\nconsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>regex<span class=\\"token punctuation\\">.</span>lastIndex<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 0</span>\\nconsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>regex<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">test</span><span class=\\"token punctuation\\">(</span>str<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// true</span>\\nconsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>regex<span class=\\"token punctuation\\">.</span>lastIndex<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 3</span>\\n</code></pre></div><ul>\\n<li><code>s</code>修饰符（单行修饰符）：使点字符<code>.</code>能够匹配包括换行符在内的所有字符。</li>\\n</ul>\\n<div class=\\"language-javascript\\" data-ext=\\"js\\" data-title=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">const</span> str <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"foo\\\\nbar\\"</span><span class=\\"token punctuation\\">;</span>\\nconsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token regex\\"><span class=\\"token regex-delimiter\\">/</span><span class=\\"token regex-source language-regex\\">foo.bar</span><span class=\\"token regex-delimiter\\">/</span></span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">test</span><span class=\\"token punctuation\\">(</span>str<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// false</span>\\nconsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token regex\\"><span class=\\"token regex-delimiter\\">/</span><span class=\\"token regex-source language-regex\\">foo.bar</span><span class=\\"token regex-delimiter\\">/</span><span class=\\"token regex-flags\\">s</span></span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">test</span><span class=\\"token punctuation\\">(</span>str<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// true</span>\\n</code></pre></div></li>\\n<li>\\n<p>正则表达式的新增属性：</p>\\n<ul>\\n<li>ES6为正则表达式对象添加了两个新的属性。</li>\\n<li><code>RegExp.prototype.sticky</code>：判断正则表达式是否开启了粘连修饰符。</li>\\n</ul>\\n<div class=\\"language-javascript\\" data-ext=\\"js\\" data-title=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">const</span> regex <span class=\\"token operator\\">=</span> <span class=\\"token regex\\"><span class=\\"token regex-delimiter\\">/</span><span class=\\"token regex-source language-regex\\">abc</span><span class=\\"token regex-delimiter\\">/</span><span class=\\"token regex-flags\\">y</span></span><span class=\\"token punctuation\\">;</span>\\nconsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>regex<span class=\\"token punctuation\\">.</span>sticky<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// true</span>\\n</code></pre></div><ul>\\n<li><code>RegExp.prototype.unicode</code>：判断正则表达式是否开启了Unicode修饰符。</li>\\n</ul>\\n<div class=\\"language-javascript\\" data-ext=\\"js\\" data-title=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">const</span> regex <span class=\\"token operator\\">=</span> <span class=\\"token regex\\"><span class=\\"token regex-delimiter\\">/</span><span class=\\"token regex-source language-regex\\">abc</span><span class=\\"token regex-delimiter\\">/</span><span class=\\"token regex-flags\\">u</span></span><span class=\\"token punctuation\\">;</span>\\nconsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>regex<span class=\\"token punctuation\\">.</span>unicode<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// true</span>\\n</code></pre></div></li>\\n</ol>","autoDesc":true}');export{k as comp,g as data};
