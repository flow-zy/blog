import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,f as t}from"./app-BGAn4IFu.js";const p={},e=t(`<h2 id="基础知识" tabindex="-1"><a class="header-anchor" href="#基础知识"><span>基础知识</span></a></h2><h3 id="什么是react" tabindex="-1"><a class="header-anchor" href="#什么是react"><span>什么是React</span></a></h3><p>React是一个由Facebook开发的用于构建用户界面的JavaScript库。它是一个采用组件化开发思想的库，通过将页面拆分成多个可复用的组件，可以更方便地开发大规模、高性能的Web应用程序。</p><p>React使用了虚拟DOM（Virtual DOM）的概念，它将页面的状态映射到组件树，并将变化的部分与实际的DOM进行对比，最终只更新需要变化的部分，以提高性能和降低资源消耗。</p><p>React具有以下特点：</p><ol><li><p>组件化开发：React将页面拆分成多个可复用和独立的组件，每个组件负责管理自己的状态和渲染逻辑，便于开发和维护复杂的UI界面。</p></li><li><p>声明式编程：通过使用JSX语法，开发人员可以以声明式的方式描述UI的外观和行为，React会根据声明的规则自动更新界面，无需手动操作DOM。</p></li><li><p>单向数据流：React中的数据流是单向的，从父组件传递给子组件，子组件通过props接收数据，保证了数据的可追踪性和可维护性。</p></li><li><p>高性能：React通过使用虚拟DOM和高效的DOM Diff算法，只更新变化的部分，减少了对实际DOM的操作次数，提高了性能。</p></li><li><p>生态系统丰富：React拥有庞大的生态系统，包括React Router用于处理路由、Redux和Mobx等状态管理库、React Native用于开发移动应用等，可以扩展React的功能和适用领域。</p></li></ol><h3 id="react的优点和特点" tabindex="-1"><a class="header-anchor" href="#react的优点和特点"><span>React的优点和特点</span></a></h3><ul><li>优点</li></ul><ol><li><p>组件化开发：React采用组件化的开发思想，将界面拆分成独立的可复用组件，使得代码更易于理解、维护和测试。组件的高度复用性也提高了开发效率。</p></li><li><p>虚拟DOM：React使用虚拟DOM（Virtual DOM）来进行高效的页面更新。它将页面的状态映射到组件树上，并将变化部分与实际DOM进行对比，然后只更新需要变化的部分，减少了对实际DOM的操作次数，提高了性能。</p></li><li><p>单向数据流：React采用单向数据流的数据管理模式，数据由父组件传递给子组件，子组件通过props接收数据。这种数据流清晰明了，易于追踪和调试，减少了出错的可能性。</p></li><li><p>JSX语法：React使用JSX语法来描述组件的结构和外观，将HTML代码和JavaScript代码融合在一起，使得开发人员可以在JavaScript中编写组件，增强了组件的可维护性和可重用性。</p></li><li><p>高性能：通过采用虚拟DOM和高效的Diff算法，React能够最小化对实际DOM的操作，减少了页面重绘的次数，提高了应用的性能。此外，React还支持使用PureComponent和memo组件进行性能优化。</p></li><li><p>生态系统丰富：React拥有庞大的生态系统，有众多开源组件和库可供选择，可以加速开发过程。此外，React还与其他流行的库和框架（如React Router、Redux等）集成得很好，提供了完整的解决方案。</p></li><li><p>跨平台开发：借助React Native，开发人员可以使用React框架来构建原生移动应用，实现跨平台开发，大大提高了开发效率和代码的复用性。</p></li></ol><p>总而言之，React的组件化开发、虚拟DOM、单向数据流等特点使其在前端开发中具有重要的优势，在构建大规模、高性能的用户界面时表现出色。同时，React还拥有丰富的生态系统和跨平台开发能力，为开发人员提供了更多的选择和便利。</p><ul><li>缺点</li></ul><ol><li><p>学习曲线陡峭：React采用了一种特殊的编程模型，使用JSX语法和组件化开发方式，这对于新手来说可能需要一些时间来适应和学习。初学者可能需要花费一些时间来熟悉React的概念和工作方式。</p></li><li><p>只关注View层：React只是一个UI库，它专注于构建用户界面的视图层，而不是提供完整的应用程序架构。这意味着开发者在使用React时需要自己选择和集成其他库或框架来处理路由、状态管理等应用程序级别的功能。</p></li><li><p>大型应用的复杂性：随着应用规模的增长，React应用可能变得越来越复杂。管理组件之间的通信、状态管理和应用的整体架构可能需要更多的努力和合理的设计。</p></li><li><p>状态管理：虽然React提供了状态管理的能力，但对于大型应用来说，选择合适的状态管理解决方案可能并不容易。开发者需要评估和选择Redux、Mobx等状态管理库，而这可能会增加复杂性和学习成本。</p></li><li><p>性能问题：虽然React通过虚拟DOM和Diff算法对页面进行优化，但在极端情况下，当组件较多或更新频繁时，React仍然可能面临性能问题。需要开发者进行性能优化，并正确使用React的优化手段（如PureComponent、memo等）。</p></li><li><p>生态系统的快速变化：React生态系统发展迅速，新的库和技术不断涌现，这可能会导致开发者需要不断跟进和学习新的东西，有时可能会出现版本兼容性、依赖关系和技术选择等问题。</p></li></ol><h3 id="react与其他前端框架的比较" tabindex="-1"><a class="header-anchor" href="#react与其他前端框架的比较"><span>React与其他前端框架的比较</span></a></h3><ol><li><p>React vs Angular：</p><ul><li>学习曲线：React相对于Angular来说，学习曲线较为平缓。Angular包含更多的概念和复杂度，需要更多的时间来学习和掌握。</li><li>构建方式：React采用组件化开发思想，并通过虚拟DOM进行高效更新，更加灵活和可控。Angular则采用模块化和依赖注入的方式，更加自动化和全面。</li><li>生态系统：React拥有庞大的生态系统和活跃的社区，提供了许多第三方组件和库，而Angular拥有完整的一站式解决方案，内置了很多功能和工具。</li><li>性能：React在处理大型应用和频繁更新时具有较好的性能，而Angular的性能在小型应用上可能更好。</li><li>选择依据：选择React还是Angular取决于项目规模、团队技能、开发需求和个人喜好等因素。</li></ul></li><li><p>React vs Vue：</p><ul><li>学习曲线：Vue的学习曲线比React更为平缓，因为Vue的设计哲学更接近传统的HTML和JavaScript，更容易上手。</li><li>构建方式：React和Vue都采用组件化开发模型，但Vue使用了更灵活的模板语法，使得编写和编译模板更为简单直观。</li><li>生态系统：React拥有庞大且成熟的生态系统，而Vue在生态系统的范围上稍逊一筹。然而，Vue也有一些优秀的插件和库可供选择。</li><li>性能：React和Vue在性能上表现相似，毕竟它们都使用了虚拟DOM和Diff算法进行高效更新。但在小型应用中，Vue可能具有更好的性能。</li><li>选择依据：选择React还是Vue取决于个人偏好、项目需求和团队经验。React适合构建大型应用和复杂场景，而Vue适合快速原型开发和更小规模的项目。</li></ul></li></ol><h3 id="react的核心概念-组件、虚拟dom、状态和属性等" tabindex="-1"><a class="header-anchor" href="#react的核心概念-组件、虚拟dom、状态和属性等"><span>React的核心概念：组件、虚拟DOM、状态和属性等</span></a></h3><ol><li><p>组件（Components）：React将用户界面拆分成独立的可复用组件，每个组件负责管理自己的状态和渲染逻辑。组件可以是类组件（Class Components）或函数组件（Function Components）。组件具有输入项（输入属性props）和输出项（渲染结果），可以通过组合和嵌套组件来构建复杂的界面。</p></li><li><p>虚拟DOM（Virtual DOM）：虚拟DOM是React的核心机制之一，它是React使用的一种轻量级的表示实际DOM结构的JavaScript对象。虚拟DOM中包含了组件的状态和结构信息，React使用虚拟DOM来进行高效的页面更新。当组件状态发生改变时，React会通过比较新旧虚拟DOM的差异，最小化对实际DOM的操作，只更新需要改变的部分，以提高性能。</p></li><li><p>状态（State）：组件的状态是组件内部管理数据的一种方式。状态是一种动态的数据，当状态发生变化时，React会重新渲染组件，更新界面。状态只能在组件内部进行修改，通过使用<code>setState</code>方法来更新状态，并触发重新渲染。</p></li><li><p>属性（Props）：属性是组件接收的输入值，它是从父组件传递到子组件的数据。属性是组件的只读数据，一旦传递给组件，属性的值就不能被组件本身修改。通过在组件中访问<code>props</code>对象，可以获取和使用传递的数据。</p></li></ol><p>这些核心概念共同构成了React的编程模型，使开发人员可以使用组件化的方式构建用户界面。通过组件化和虚拟DOM的机制，React提供了高效的页面更新和管理组件状态的能力，同时通过属性的传递和状态的管理，实现了组件之间的数据传递和交互。这些概念是理解和使用React的基础。</p><h2 id="jsx语法" tabindex="-1"><a class="header-anchor" href="#jsx语法"><span>JSX语法</span></a></h2><h3 id="什么是jsx" tabindex="-1"><a class="header-anchor" href="#什么是jsx"><span>什么是JSX</span></a></h3><p>JSX（JavaScript XML）是一种JavaScript的语法扩展，用于在React中编写组件的UI结构。它允许我们在JavaScript代码中直接书写类似于HTML的标记结构，以声明式的方式构建用户界面。</p><p>在使用JSX时，我们可以使用HTML标签和组件来描述UI的结构，同时可以在标签中嵌入JavaScript表达式，通过花括号 {} 来包裹。这使得我们可以在UI中动态地使用变量、执行函数、进行条件判断等操作。</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">&#39;John Doe&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Hello, </span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token plain-text">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Welcome to my website.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述示例中，我们使用了<code>&lt;div&gt;</code>、<code>&lt;h1&gt;</code>、<code>&lt;p&gt;</code>等HTML标签来构建UI结构。通过花括号 <code>{}</code> 包裹的表达式，我们可以动态地插入变量<code>name</code>。</p><p>JSX被React组件的<code>render</code>方法所支持，它会将JSX代码转换为纯JavaScript代码，被React解析和渲染到最终的DOM结构中。</p><p>JSX看起来类似HTML，但实际上它被转换成等效的JavaScript代码。这意味着我们可以在JSX中使用JavaScript语法，但也要遵循JSX语法规则，如标签闭合、属性名使用驼峰命名等。</p><h3 id="jsx与html的区别" tabindex="-1"><a class="header-anchor" href="#jsx与html的区别"><span>JSX与HTML的区别</span></a></h3><p>JSX与HTML在外观上很相似，因为它们都使用了类似于HTML的标记结构。</p><ol><li><p>语法规则：JSX是JavaScript的语法扩展，而HTML是一种独立的标记语言。因此，JSX需要遵循JavaScript的语法规则，如使用花括号 <code>{}</code> 包裹表达式、使用驼峰命名属性等。HTML是一种更宽松的标记语言，对于标签闭合和属性命名更宽松。</p></li><li><p>表达式插入：在JSX中，可以使用花括号 <code>{}</code> 插入JavaScript表达式，从而动态地生成内容。这使得在JSX中可以直接使用变量、执行函数、进行条件判断等操作。HTML中没有这种内嵌表达式的能力。</p></li><li><p>属性名称：在JSX中，属性名称使用驼峰命名，而HTML中属性名称是不区分大小写的。</p></li><li><p>类名和样式：在JSX中，使用<code>className</code>属性代替HTML中的<code>class</code>属性来定义元素的类名。同样地，使用<code>style</code>属性传递一个JavaScript对象，而不是直接在属性中写CSS样式。</p></li></ol><p>JSX和HTML的对比示例：</p><p>JSX示例：</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">&#39;John Doe&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> isActive <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token punctuation">(</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>container<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Hello, </span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token plain-text">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>isActive <span class="token operator">?</span> <span class="token string">&#39;active&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;inactive&#39;</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Welcome to my website.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>HTML示例：</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>container<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>Hello, John Doe!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>active<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Welcome to my website.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虽然JSX和HTML看起来相似，但它们是不同的语言，有不同的语法和解析方式。在使用JSX时，需要确保它被正确地转换为纯JavaScript代码，从而被React组件所理解和渲染。</p><h3 id="jsx的基本语法规则" tabindex="-1"><a class="header-anchor" href="#jsx的基本语法规则"><span>JSX的基本语法规则</span></a></h3><ol><li><p>标签：使用类似HTML的标签来描述元素的结构，标签名称可以是HTML标签或自定义的React组件。标签需要正确闭合。</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token comment">// 使用HTML标签</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">// 使用React组件</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MyComponent</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">MyComponent</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>嵌套：标签可以相互嵌套，形成层次结构。</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Heading</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Paragraph</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>表达式插入：可以通过花括号 {} 在标签中插入JavaScript表达式。表达式可以是变量、函数调用、条件判断等。</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">&#39;John Doe&#39;</span><span class="token punctuation">;</span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Hello, </span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token plain-text">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>属性：使用类似HTML的属性来传递数据给标签。属性名称遵循驼峰命名规则，属性值可以是字符串或嵌套的表达式。</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>image.jpg<span class="token punctuation">&quot;</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Image<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Click me</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>类名和样式：使用<code>className</code>属性来指定元素的类名，使用<code>style</code>属性传递一个JavaScript对象来定义元素的样式。类名和样式规则与HTML相同。</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>container<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">&#39;red&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">fontSize</span><span class="token operator">:</span> <span class="token string">&#39;16px&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Text content</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>注释：使用花括号和斜杠 <code>{/* */}</code> 来添加注释。</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token punctuation">{</span><span class="token comment">/* This is a comment */</span><span class="token punctuation">}</span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Hello, World!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Fragments（片段）：如果要返回多个相邻的元素，可以使用空标签或片段来包裹它们，以避免创建一个额外的父级容器元素。</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token comment">// 使用空标签</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Heading 1</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Paragraph 1</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Heading 2</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Paragraph 2</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">&gt;</span></span>

<span class="token comment">// 使用片段</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">React.Fragment</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Heading 1</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Paragraph 1</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Heading 2</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Paragraph 2</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">React.Fragment</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>标签自闭合：对于没有子元素的标签，可以使用自闭合语法。</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token comment">// 自闭合</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>image.jpg<span class="token punctuation">&quot;</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Image<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>

<span class="token comment">// 非自闭合</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>image.jpg<span class="token punctuation">&quot;</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Image<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>img</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>在使用JSX时，必须将其转换为有效的JavaScript代码。通常情况下，使用Babel等工具来进行转换，以便React组件可以正确解析和渲染JSX代码。</p><h3 id="使用jsx创建react元素" tabindex="-1"><a class="header-anchor" href="#使用jsx创建react元素"><span>使用JSX创建React元素</span></a></h3><p>使用JSX创建React元素非常简单，只需按照以下步骤操作：</p><ol><li><p>导入React库：</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>创建React元素：</p><p>使用JSX语法创建一个React元素，类似于使用HTML标签。可以使用自定义的React组件或原生HTML标签作为元素的类型。</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Hello, World!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>渲染React元素：</p><p>使用ReactDOM库中的<code>render</code>方法将React元素渲染到指定的DOM容器上。</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">&#39;react-dom&#39;</span><span class="token punctuation">;</span>

ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;root&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>完整的示例代码如下：</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">&#39;react-dom&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Hello, World!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>

ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;root&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述示例中，我们导入了React和ReactDOM库，然后使用JSX语法创建了一个简单的React元素，其中包含一个<code>&lt;h1&gt;</code>标签。最后使用<code>ReactDOM.render</code>方法将该元素渲染到id为<code>root</code>的DOM容器中。</p><p>这样，当应用程序加载时，React将会将JSX转换为相应的JavaScript代码，并将其渲染到DOM中，显示为&quot;Hello, World!&quot;。</p><h2 id="组件" tabindex="-1"><a class="header-anchor" href="#组件"><span>组件</span></a></h2><h3 id="函数组件和类组件的区别" tabindex="-1"><a class="header-anchor" href="#函数组件和类组件的区别"><span>函数组件和类组件的区别</span></a></h3><p>函数组件和类组件是React中两种常见的组件类型，它们之间有一些区别。函数组件和类组件的主要区别：</p><ol><li>语法：函数组件是使用函数的形式定义的，而类组件是使用ES6类的形式定义的。</li></ol><p>函数组件示例：</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">function</span> <span class="token function">FunctionComponent</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Hello, </span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token plain-text">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类组件示例：</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">class</span> <span class="token class-name">ClassComponent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Hello, </span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token plain-text">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><p>写法：函数组件更简洁，只需要编写一个函数，函数的返回值是组件的结构和内容。类组件需要继承自React.Component类，并编写render方法来返回组件的结构和内容。</p></li><li><p>状态管理：在React 16.8版本之前，函数组件没有内置的状态管理功能，只能通过使用React的Hooks来处理状态。而类组件可以使用this.state来管理组件的状态，并使用this.setState来更新状态。</p></li><li><p>生命周期：在React 16.3版本之前，函数组件没有生命周期方法，只能通过使用useEffect等Hooks来模拟生命周期。而类组件可以使用生命周期方法，如componentDidMount、componentDidUpdate等来处理组件的不同阶段。</p></li><li><p>性能：函数组件通常比类组件具有更好的性能，因为函数组件本身更简单，没有额外的实例化和继承开销。</p></li></ol><p>总的来说，函数组件更简洁、易于理解和维护，适合编写简单的无状态组件。而类组件更强大，拥有更多的功能和生命周期方法，适合编写复杂的有状态组件。</p><h3 id="创建react组件的基本语法" tabindex="-1"><a class="header-anchor" href="#创建react组件的基本语法"><span>创建React组件的基本语法</span></a></h3><p>在React中，创建组件的基本语法有两种：函数组件和类组件。</p><ol><li><p>函数组件: 函数组件是最简单的一种组件形式，通过一个函数来定义组件。函数组件适合编写那些不需要内部状态管理和生命周期方法的简单组件。</p><p>创建一个函数组件的基本语法如下:</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">function</span> <span class="token function">FunctionComponent</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Hello, </span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token plain-text">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在函数组件中，函数名称即为组件的名称，组件的输入参数通常被命名为<code>props</code>，代表传入的属性。函数返回的内容就是组件的结构和渲染的内容。可以在返回的JSX代码中使用<code>props</code>对象来访问传入的属性。</p></li><li><p>类组件: 类组件是通过继承React.Component类来定义的，这种形式适用于需要内部状态管理和生命周期方法的组件。</p><p>创建一个类组件的基本语法如下:</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">class</span> <span class="token class-name">ClassComponent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Hello, </span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token plain-text">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在类组件中，使用<code>render()</code>方法来返回组件的结构和渲染的内容。在<code>render()</code>方法中可以通过<code>this.props</code>来访问传入的属性。</p></li></ol><p>创建完组件后，可以使用该组件在其他地方进行渲染，例如将其作为子组件放在另一个组件中：</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">FunctionComponent</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Alice<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ClassComponent</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Bob<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述示例中，我们创建了一个名为App的函数组件，并在其中渲染了前面定义的函数组件和类组件，并传递了name属性。</p><h3 id="组件的状态-state-和属性-props" tabindex="-1"><a class="header-anchor" href="#组件的状态-state-和属性-props"><span>组件的状态（state）和属性（props）</span></a></h3><p>在React组件中，状态（state）和属性（props）是两个重要的概念，用于管理组件的数据。它们有以下区别：</p><p>属性（props）：</p><ul><li>属性是从组件的父组件传递给子组件的数据。</li><li>属性是只读的，子组件不能直接修改父组件传递的属性。</li><li>父组件可以在实例化或者渲染子组件时，通过在子组件上添加属性传递数据。</li><li>子组件可以通过<code>this.props</code>来访问父组件传递的属性。例如：<code>this.props.name</code>将访问<code>name</code>属性的值。</li></ul><p>示例：</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token comment">// 父组件</span>
<span class="token keyword">function</span> <span class="token function">ParentComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ChildComponent</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Alice<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 子组件</span>
<span class="token keyword">function</span> <span class="token function">ChildComponent</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Hello, </span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token plain-text">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>状态（state）：</p><ul><li>状态是组件内部管理的数据。</li><li>状态是可变的，在组件的生命周期中可以通过<code>this.state</code>来访问和修改状态。</li><li>状态初始化通常在构造函数<code>constructor</code>中进行，使用<code>this.state</code>来定义初始状态。</li><li>可以使用<code>this.setState()</code>方法更新状态，并且React会自动重新渲染组件。</li></ul><p>示例：</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">class</span> <span class="token class-name">CounterComponent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">incrementCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Count: </span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">incrementCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Increment</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>CounterComponent</code>是一个类组件，它包含一个状态<code>count</code>。在<code>render</code>方法中，通过<code>this.state.count</code>访问状态的值。在点击按钮时，调用<code>incrementCount</code>方法更新状态，使用<code>this.setState</code>方法更新<code>count</code>的值，并触发重新渲染。</p><p>总结： 属性是从父组件传递给子组件的只读数据， 而状态是组件内部管理的可变数据。通过属性，组件可以接收外部的数据，而通过状态，组件可以管理自己的数据。</p><h3 id="组件的渲染-rendering" tabindex="-1"><a class="header-anchor" href="#组件的渲染-rendering"><span>组件的渲染（rendering）</span></a></h3><p>组件的渲染是指将组件的结构和内容转换为实际的DOM元素，从而在浏览器中呈现出来。在React中，组件的渲染是通过<code>render</code>方法来实现的。</p><p>无论是函数组件还是类组件，都必须实现一个<code>render</code>方法来返回组件的结构和内容。<code>render</code>方法应该只负责返回组件的UI表示，不应该包含副作用或直接修改状态。</p><p>函数组件的渲染：</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">function</span> <span class="token function">FunctionComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Hello, World!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述函数组件的渲染非常简单，只需在函数体中直接返回JSX。在函数组件中，返回的JSX定义了组件渲染后的结构和内容。</p><p>类组件的渲染：</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">class</span> <span class="token class-name">ClassComponent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Hello, World!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类组件中的<code>render</code>方法同样返回JSX，用于定义组件的结构和内容。<code>render</code>方法是类组件中必须实现的一个方法。</p><p>要渲染组件，需要将其放置在其他组件中或者挂载到DOM中。在ReactDOM中，可以使用<code>ReactDOM.render</code>方法将组件渲染到指定的DOM容器中。</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">FunctionComponent</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">;</span>
ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;root&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上述示例中，<code>FunctionComponent</code>被渲染为一个element，并通过<code>ReactDOM.render</code>方法将其渲染到一个id为<code>root</code>的DOM容器中。</p><p>渲染的结果是将组件的结构转换为实际的DOM元素，并在浏览器中呈现。当组件的属性或状态发生变化时，React会根据变化自动更新组件的渲染结果，实现了React的响应式特性。</p><h3 id="组件的生命周期" tabindex="-1"><a class="header-anchor" href="#组件的生命周期"><span>组件的生命周期</span></a></h3><p>在React中，组件的生命周期指的是在组件存在期间，组件经历的不同阶段和触发的特定方法。这些方法可以让我们在不同的时机执行相关的操作，例如初始化组件、处理更新和清理资源等。</p><p>在React 16.3版本之前，组件的生命周期包括三个阶段：挂载（Mounting）、更新（Updating）和卸载（Unmounting）。从React 16.3版本开始，还引入了一些新的生命周期方法和改动。下面是组件的生命周期和对应的方法：</p><ol><li>挂载阶段（Mounting）</li></ol><ul><li>constructor：组件实例化时调用，用于初始化状态和绑定事件处理程序。</li><li>static getDerivedStateFromProps：在渲染过程中调用，用于根据props初始化或更新state。</li><li>render：必需的方法，在这里返回组件的JSX表示。</li><li>componentDidMount：组件第一次渲染完成后调用，在这里进行异步数据加载、订阅事件等副作用操作。</li></ul><ol start="2"><li>更新阶段（Updating）</li></ol><ul><li>static getDerivedStateFromProps：在组件接收到新的props时调用，用于根据props更新state。</li><li>shouldComponentUpdate：在组件更新前调用，控制组件是否重新渲染，默认返回true。</li><li>render：重新渲染组件。</li><li>componentDidUpdate：组件更新完成后调用，进行DOM操作或在更新后的状态做一些操作。</li></ul><ol start="3"><li>卸载阶段（Unmounting）</li></ol><ul><li>componentWillUnmount：组件即将从DOM中移除时调用，进行清理工作，如取消订阅或清除计时器。</li></ul><p>还有一些React 16.3版本之后引入的新方法：</p><ul><li>static getDerivedStateFromError：当组件的子组件抛出错误时调用，用于渲染出错处理。</li><li>componentDidCatch：当子组件抛出错误时调用，用于记录错误信息和报告。</li></ul><p>此外，React还有一些弃用和即将弃用的生命周期方法，比如UNSAFE_componentWillMount、UNSAFE_componentWillReceiveProps、UNSAFE_componentWillUpdate，建议尽量避免使用它们。</p><p>从React 17版本开始，一些生命周期方法被标记为已弃用，并且有一些新方法被推荐使用，例如static getDerivedStateFromProps和componentDidCatch。</p><p>总结：组件的生命周期包括挂载阶段、更新阶段和卸载阶段，在每个阶段都有对应的生命周期方法可以重写，以便在合适的时机执行相关操作。了解组件的生命周期可以帮助我们更好地管理组件的状态和执行逻辑。</p><ol><li>constructor：构造函数方法，在组件实例化时调用。初始化组件的状态（state），绑定方法的this指向等操作可以在这里进行。 示例代码：</li></ol><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token comment">// 绑定方法的this指向</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>handleClick <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleClick</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>static getDerivedStateFromProps：当组件接收到新的props时调用，用于根据props更新组件状态（state）。 示例代码：</li></ol><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">static</span> <span class="token function">getDerivedStateFromProps</span><span class="token punctuation">(</span><span class="token parameter">nextProps<span class="token punctuation">,</span> prevState</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>nextProps<span class="token punctuation">.</span>count <span class="token operator">!==</span> prevState<span class="token punctuation">.</span>count<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> nextProps<span class="token punctuation">.</span>count <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>render：必需的方法，用于返回组件的JSX表示。在这里，我们可以创建组件的UI结构。 示例代码：</li></ol><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Count: </span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleClick<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Increment</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>componentDidMount：在组件第一次渲染完成后调用，可以在这里进行异步数据加载、订阅事件等副作用操作。 示例代码：</li></ol><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 异步请求数据</span>
  <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;/api/data&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> data <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 订阅事件</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>subscription <span class="token operator">=</span> eventEmitter<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">&#39;event&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>shouldComponentUpdate：在组件更新前调用，返回一个布尔值，用于控制是否重新渲染组件。可以用于性能优化，避免不必要的重渲染。 示例代码：</li></ol><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token function">shouldComponentUpdate</span><span class="token punctuation">(</span><span class="token parameter">nextProps<span class="token punctuation">,</span> nextState</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>count <span class="token operator">===</span> nextProps<span class="token punctuation">.</span>count <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">===</span> nextState<span class="token punctuation">.</span>count<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="6"><li>componentDidUpdate：在组件更新完成后调用，可以进行DOM操作或在更新后的状态进行一些操作。 示例代码：</li></ol><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token function">componentDidUpdate</span><span class="token punctuation">(</span><span class="token parameter">prevProps<span class="token punctuation">,</span> prevState</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>prevState<span class="token punctuation">.</span>count <span class="token operator">!==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Count updated:&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="7"><li>componentWillUnmount：在组件即将从DOM中移除时调用，可以进行一些清理工作，比如取消订阅或清除计时器。 示例代码：</li></ol><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token function">componentWillUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 取消订阅</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>subscription<span class="token punctuation">.</span><span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 清除计时器</span>
  <span class="token function">clearInterval</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每个方法都有特定的用途和执行时机，通过重写这些方法，我们可以控制组件的行为，实现相应的操作和逻辑。需要根据具体的需求选择合适的生命周期方法来使用。</p><h3 id="高阶组件-hoc" tabindex="-1"><a class="header-anchor" href="#高阶组件-hoc"><span>高阶组件（HOC）</span></a></h3><p>高阶组件（Higher-Order Component，简称HOC）是一种在React中用来复用组件逻辑的高级技术。</p><p>HOC本质上是一个函数，可以接受一个组件作为参数并返回一个新的组件。这种模式可以将组件逻辑进行抽象和封装，使得代码更具可重用性和可维护性。</p><p>HOC可以用于很多场景，比如：</p><p>属性代理：通过修改组件的props，可以将共享的props、事件处理函数等注入到原组件中。这种方式可以用于实现一些通用的逻辑，如日志记录、性能监测等。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">withLogger</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">WrappedComponent</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">WithLogger</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Props:&#39;</span><span class="token punctuation">,</span> props<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">&lt;</span>WrappedComponent <span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> MyComponent <span class="token operator">=</span> <span class="token function">withLogger</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>渲染劫持：通过修改组件的渲染过程，可以动态地修改组件的行为和外观，比如添加条件渲染、添加loading状态等。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">withLoading</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">WrappedComponent</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">WithLoading</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> isLoading<span class="token punctuation">,</span> <span class="token operator">...</span>restProps <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>isLoading<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>Loading<span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token operator">&lt;</span>WrappedComponent <span class="token punctuation">{</span><span class="token operator">...</span>restProps<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> MyComponent <span class="token operator">=</span> <span class="token function">withLoading</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>响应式数据注入：通过使用容器组件包裹原组件，并将外部数据传递给原组件，可以实现数据的管理和状态的共享。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">withData</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">WrappedComponent</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">class</span> <span class="token class-name">WithData</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
      <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 获取数据并更新state</span>
      <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;api/data&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> data <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token operator">&lt;</span>WrappedComponent data<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>data<span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> MyComponent <span class="token operator">=</span> <span class="token function">withData</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
      <span class="token punctuation">{</span>props<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token operator">&lt;</span>div key<span class="token operator">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>id<span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过使用HOC，我们可以将一些具有相似功能或具有共同需求的组件逻辑进行提取和复用，避免了代码的重复编写和重复维护。同时，HOC也提高了代码的可读性和可测试性，使得组件变得更加灵活和可扩展。</p><h2 id="事件处理" tabindex="-1"><a class="header-anchor" href="#事件处理"><span>事件处理</span></a></h2><h3 id="事件处理的基本概念" tabindex="-1"><a class="header-anchor" href="#事件处理的基本概念"><span>事件处理的基本概念</span></a></h3><p>事件处理是指在Web应用程序中对用户交互事件（如点击、键盘输入、鼠标移动等）做出响应的过程。在React中，可以通过事件处理程序来捕捉和处理这些事件。</p><ol><li><p>事件绑定：使用JSX语法，在React元素中通过指定事件属性来绑定事件处理程序。常见的事件属性包括<code>onClick</code>、<code>onKeyDown</code>、<code>onSubmit</code>等。</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Click me</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">onKeyDown</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleKeyDown<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">onSubmit</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleSubmit<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token punctuation">{</span><span class="token comment">/* form content */</span><span class="token punctuation">}</span><span class="token plain-text">
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>事件处理程序：事件处理程序是一个JavaScript函数，用于定义事件被触发时要执行的操作。可以在组件内部定义事件处理程序，并将其作为属性传递给相应的元素。</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">function</span> <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Button clicked&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">handleKeyDown</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Key pressed:&#39;</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">handleSubmit</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Form submitted&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>事件对象：事件处理程序的参数通常是一个事件对象，其中包含有关触发事件的详细信息，如触发元素、按下的按键等。可以根据需要从事件对象中提取所需的信息。</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">function</span> <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Button clicked:&#39;</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">handleKeyDown</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Key pressed:&#39;</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">handleSubmit</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Form submitted:&#39;</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>elements<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>事件传参：有时需要将额外的参数传递给事件处理程序。可以使用箭头函数或<code>bind()</code>方法来传递参数。</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token string">&#39;param&#39;</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Click me</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token function">handleClick</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&#39;param&#39;</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Click me</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>在React中，事件处理程序通常是在类组件的方法中定义，或在函数组件内部使用<code>useState</code>或<code>useCallback</code>等钩子来定义。事件处理程序可以更新组件的状态、触发组件重新渲染以及执行其他操作。</p><p>在使用事件处理程序时，要确保正确绑定和处理事件，以避免出现意外行为或性能问题。</p><h3 id="绑定事件处理函数的方法" tabindex="-1"><a class="header-anchor" href="#绑定事件处理函数的方法"><span>绑定事件处理函数的方法</span></a></h3><ol><li><p>使用箭头函数： 使用箭头函数可以直接在JSX语法中定义并绑定事件处理函数。这种方式可以方便地传递参数给事件处理函数。</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">handleButtonClick</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Click me</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>使用类组件中的方法： 在类组件中，可以将事件处理函数定义为类的方法，并在JSX中通过<code>this</code>关键字来引用。</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Button clicked&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleClick<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Click me</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在类组件中使用方法时，需要注意确保方法内部的<code>this</code>指向组件实例，可以使用<code>bind</code>方法或者使用箭头函数进行绑定。</p></li><li><p>使用函数组件中的钩子： 在函数组件中，可以使用<code>useState</code>或<code>useCallback</code>钩子来定义事件处理函数。这样可以确保函数在重新渲染时保持一致。</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">function</span> <span class="token function">MyComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Button clicked&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Click me</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>无论使用哪种方法，重要的是将事件处理函数正确地绑定到元素的事件属性上，以确保在事件触发时执行相应的操作。此外，还可以使用<code>preventDefault()</code>方法来阻止事件的默认行为，或者使用<code>stopPropagation()</code>方法来停止事件冒泡传播到父元素。</p><h3 id="事件对象和事件参数" tabindex="-1"><a class="header-anchor" href="#事件对象和事件参数"><span>事件对象和事件参数</span></a></h3><p>事件对象是在事件处理函数被调用时自动传递给事件处理函数的一个参数。它包含了关于触发事件的详细信息，如触发元素、按下的按键、鼠标位置等。</p><p>在React中，事件对象通常作为事件处理函数的第一个参数传递。你可以按照下面的方式来访问事件对象中的属性和方法：</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">function</span> <span class="token function">handleEvent</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 访问事件对象的属性</span>
  <span class="token keyword">const</span> target <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">;</span>
  <span class="token keyword">const</span> eventType <span class="token operator">=</span> event<span class="token punctuation">.</span>type<span class="token punctuation">;</span>

  <span class="token comment">// 阻止事件的默认行为</span>
  event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 停止事件冒泡传播</span>
  event<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>常用的事件对象属性如下：</p><ul><li><code>target</code>：触发事件的元素对象。</li><li><code>currentTarget</code>：注册事件处理函数的元素对象。</li><li><code>type</code>：触发的事件类型，如<code>&quot;click&quot;</code>、<code>&quot;keydown&quot;</code>等。</li><li><code>key</code>：按下的键的值（仅适用于键盘事件）。</li><li><code>clientX</code>、<code>clientY</code>：鼠标事件发生时的鼠标指针相对于浏览器视口的水平和垂直坐标。</li><li><code>pageX</code>、<code>pageY</code>：鼠标事件发生时的鼠标指针相对于整个文档的水平和垂直坐标。</li><li><code>preventDefault()</code>：阻止事件的默认行为。</li><li><code>stopPropagation()</code>：停止事件冒泡传播到父元素。</li></ul><p>除了常用的事件对象属性，不同类型的事件可能还有其他特定的属性。你可以根据需要查阅相关文档来获取更详细的信息。</p><p>由于React的合成事件系统，事件对象在合成事件还是原生事件之间存在一些差异。但在大多数情况下，你可以像上面的例子一样使用事件对象，不必特别关注这些差异。</p><h3 id="常见的事件类型" tabindex="-1"><a class="header-anchor" href="#常见的事件类型"><span>常见的事件类型</span></a></h3><ol><li><p>鼠标事件：</p><ul><li><code>click</code>：鼠标点击事件。</li><li><code>dblclick</code>：鼠标双击事件。</li><li><code>mouseover</code>：鼠标移入事件。</li><li><code>mouseout</code>：鼠标移出事件。</li><li><code>mousemove</code>：鼠标移动事件。</li><li><code>mousedown</code>：鼠标按下事件。</li><li><code>mouseup</code>：鼠标松开事件。</li></ul></li><li><p>键盘事件：</p><ul><li><code>keydown</code>：键盘按下事件。</li><li><code>keyup</code>：键盘松开事件。</li><li><code>keypress</code>：键盘按键事件。</li></ul></li><li><p>表单事件：</p><ul><li><code>input</code>：输入框内容变化事件。</li><li><code>change</code>：表单元素值改变事件。</li><li><code>submit</code>：表单提交事件。</li><li><code>focus</code>：表单元素获得焦点事件。</li><li><code>blur</code>：表单元素失去焦点事件。</li></ul></li><li><p>触摸事件（移动设备）：</p><ul><li><code>touchstart</code>：手指触摸屏幕事件。</li><li><code>touchmove</code>：手指在屏幕上滑动事件。</li><li><code>touchend</code>：手指离开屏幕事件。</li></ul></li><li><p>滚动事件：</p><ul><li><code>scroll</code>：滚动事件，当元素滚动时触发。</li></ul></li></ol><h2 id="表单" tabindex="-1"><a class="header-anchor" href="#表单"><span>表单</span></a></h2><h3 id="表单元素的基本用法" tabindex="-1"><a class="header-anchor" href="#表单元素的基本用法"><span>表单元素的基本用法</span></a></h3><p>表单元素是网页中常用的交互元素，用于接收用户输入的数据。</p><ol><li><p><code>&lt;form&gt;</code>元素： 表单元素包裹了表单中的其他元素，并提供了一些表单级别的属性和事件。通常情况下，表单元素会有一个<code>action</code>属性来指定表单数据的提交目标，以及一个<code>method</code>属性来指定数据提交的HTTP方法（通常为GET或POST）。</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/submit<span class="token punctuation">&quot;</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>POST<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- 表单内容 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>&lt;input&gt;</code>元素： <code>&lt;input&gt;</code>元素用于接收单行文本输入。常见的<code>type</code>属性值有：</p><ul><li><code>text</code>：文本输入框。</li><li><code>password</code>：密码输入框，输入的文本会被隐藏。</li><li><code>email</code>：电子邮件输入框。</li><li><code>number</code>：数字输入框。</li><li><code>checkbox</code>：复选框。</li><li><code>radio</code>：单选框。</li></ul><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>username<span class="token punctuation">&quot;</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>请输入用户名<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><code>&lt;textarea&gt;</code>元素： <code>&lt;textarea&gt;</code>元素用于接收多行文本输入。</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>message<span class="token punctuation">&quot;</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>请输入消息<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><code>&lt;select&gt;</code>和<code>&lt;option&gt;</code>元素： <code>&lt;select&gt;</code>元素创建了一个下拉菜单选择框，而<code>&lt;option&gt;</code>元素定义了下拉菜单的选项。</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>country<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>china<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>中国<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>us<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>美国<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>uk<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>英国<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>&lt;button&gt;</code>元素： <code>&lt;button&gt;</code>元素用于创建按钮。</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>提交<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>提交表单： 提交表单可以使用表单元素内的提交按钮。</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/submit<span class="token punctuation">&quot;</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>POST<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- 表单内容 --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>提交<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>处理表单提交： 在服务器端或前端框架中，可以通过处理表单的提交事件来获取用户输入的数据。通常使用JavaScript来监听表单的<code>submit</code>事件，并在事件处理函数中处理表单数据。</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/submit<span class="token punctuation">&quot;</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>POST<span class="token punctuation">&quot;</span></span> <span class="token special-attr"><span class="token attr-name">onsubmit</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value javascript language-javascript"><span class="token function">handleSubmit</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- 表单内容 --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>提交<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">handleSubmit</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 阻止表单默认提交行为</span>
  <span class="token keyword">const</span> formData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取表单数据</span>
  <span class="token comment">// 处理表单数据...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>这只是表单元素的基本用法，实际使用会涉及更多的属性和事件。通过表单元素，用户可以方便地输入数据并提交到服务器或进行其他类型的交互操作。</p><h3 id="受控组件和非受控组件" tabindex="-1"><a class="header-anchor" href="#受控组件和非受控组件"><span>受控组件和非受控组件</span></a></h3><p>在React和其他一些前端框架中，有两种常见的方式来处理表单元素的值和状态：受控组件和非受控组件。</p><ol><li>受控组件（Controlled Components）： 在受控组件中，表单元素的值由React组件的状态所控制。当用户输入或选择表单元素时，通过事件处理函数更新组件的状态，然后使用状态值来渲染表单元素。</li></ol><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">class</span> <span class="token class-name">ControlledComponent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">inputValue</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function-variable function">handleChange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">inputValue</span><span class="token operator">:</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function-variable function">handleSubmit</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 使用 this.state.inputValue 进行处理</span>
  <span class="token punctuation">}</span>

  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">onSubmit</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleSubmit<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>
          <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span>
          <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>inputValue<span class="token punctuation">}</span></span>
          <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleChange<span class="token punctuation">}</span></span>
        <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">提交</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>受控组件的优点是可以完全控制表单元素的状态，可以在React组件中进行验证和处理，并且方便在表单提交时访问和处理表单数据。</p><ol start="2"><li>非受控组件（Uncontrolled Components）： 在非受控组件中，表单元素的值不受React组件状态的控制，而是由DOM本身维护。可以通过使用<code>ref</code>来获取表单元素的值。</li></ol><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">class</span> <span class="token class-name">UncontrolledComponent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">handleSubmit</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> inputValue <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>inputRef<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
    <span class="token comment">// 使用 inputValue 进行处理</span>
  <span class="token punctuation">}</span>

  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">onSubmit</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleSubmit<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token parameter">ref</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>inputRef <span class="token operator">=</span> ref<span class="token punctuation">)</span><span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">提交</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>非受控组件的优点是写起来更简单，不需要维护组件状态。但缺点是没有集中控制表单数据的能力，可能需要手动做一些数据验证和处理。</p><p>如果需要精确控制和处理表单数据，建议使用受控组件。如果表单较简单或需要快速开发，非受控组件可能更合适。</p><h3 id="表单验证和错误处理" tabindex="-1"><a class="header-anchor" href="#表单验证和错误处理"><span>表单验证和错误处理</span></a></h3><ol><li><p>表单验证：</p><ul><li>React表单验证通常在提交时或输入时进行。可以在提交表单时进行完整的验证，或在输入时实时验证。</li><li>使用表单验证库（如Formik、Yup、React Hook Form等）来简化表单验证逻辑。</li><li>可以通过正则表达式、内置的验证方法、自定义验证函数等方式进行验证。验证结果可以存储在组件状态中。</li></ul></li><li><p>错误处理：</p><ul><li>在处理表单错误时，可以使用组件状态来存储错误信息。例如，可以为每个表单字段创建一个对应的错误状态字段，并在验证或提交过程中设置错误信息。</li><li>将错误信息显示给用户，可以使用条件渲染来根据错误状态字段来显示相应的错误。可以在表单项下方显示错误信息，或在表单项旁边显示错误提示。</li><li>根据不同的情况，可以选择使用内联错误提示、弹出消息框等方式来呈现错误信息。</li><li>可以为表单输入框添加样式，如红色边框或背景色变化等，以突出显示出现错误的输入框。</li></ul></li><li><p>错误处理的反馈和用户体验：</p><ul><li>在显示错误信息时，应尽量提供清晰的错误提示，以帮助用户理解错误的原因和如何纠正它。</li><li>可以使用动画效果或逐渐显示错误信息，以改善用户体验。</li><li>在用户纠正错误后，应及时清除或更新错误状态，并提供及时反馈。</li><li>可以使用aria-live属性或类似技术，在屏幕阅读器中提供适当的辅助功能支持。</li></ul></li></ol><h3 id="处理表单提交" tabindex="-1"><a class="header-anchor" href="#处理表单提交"><span>处理表单提交</span></a></h3><ol><li><p>监听表单提交事件：</p><ul><li>在React中，可以使用<code>onSubmit</code>事件来监听表单的提交。</li><li>在组件中定义一个处理提交的回调函数，将其作为<code>onSubmit</code>事件的处理函数。</li></ul></li><li><p>阻止表单默认提交行为：</p><ul><li>在提交表单时，浏览器通常会执行默认的表单提交行为，刷新页面或跳转到指定的URL。</li><li>在React中，可以调用事件对象的<code>preventDefault()</code>方法，来阻止默认的提交行为发生。</li></ul></li><li><p>获取表单数据：</p><ul><li>可以通过事件对象的<code>target</code>属性来获取表单元素的值。</li><li>使用<code>event.target.elements</code>可以获取所有的表单元素。</li><li>针对特定表单元素，可以通过<code>name</code>属性访问它的值，例如：<code>event.target.elements.name.value</code>。</li></ul></li><li><p>处理表单提交逻辑：</p><ul><li>在提交表单时，可以进行一些逻辑处理，例如表单验证、发送网络请求等。</li><li>可以在回调函数中执行相应的逻辑，并根据结果来更新组件状态或进行相应的操作。</li><li>可以使用异步操作、Promise、async/await等方式来处理通信或数据操作的过程。</li></ul></li><li><p>提供用户反馈：</p><ul><li>在提交表单期间，可以显示加载指示符或其他适当的反馈给用户，以表示正在进行操作。</li><li>可以禁用提交按钮，以防止用户多次点击提交。</li><li>根据提交的结果，可以向用户显示成功或失败的消息，并采取相应的行动。</li></ul></li></ol><h2 id="组件通信" tabindex="-1"><a class="header-anchor" href="#组件通信"><span>组件通信</span></a></h2><h3 id="父子组件通信" tabindex="-1"><a class="header-anchor" href="#父子组件通信"><span>父子组件通信</span></a></h3><p>在React中，父子组件之间的通信可以通过props和回调函数来实现。</p><ol><li><p>Props传递：</p><ul><li>父组件通过props将数据或函数传递给子组件。</li><li>子组件可以通过props来读取传递的数据，并在需要时调用传递的函数。</li></ul></li><li><p>State提升：</p><ul><li>如果多个子组件需要共享相同的数据，可以将该数据状态提升到它们共同的父组件中，然后通过props传递给子组件。</li><li>父组件通过改变状态的方式来更新数据，子组件通过props接收并使用这些数据。</li></ul></li><li><p>回调函数：</p><ul><li>父组件可以定义一个回调函数，然后将该函数作为props传递给子组件。</li><li>子组件可以调用该回调函数来向父组件传递数据或触发特定的事件。</li><li>通过回调函数的方式，子组件可以向父组件发送数据或请求执行某些操作。</li></ul></li></ol><p>下面举一个简单的例子来说明父子组件通信的实现方式：</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token comment">// 父组件</span>
<span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> ChildComponent <span class="token keyword">from</span> <span class="token string">&#39;./ChildComponent&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">ParentComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>message<span class="token punctuation">,</span> setMessage<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token function-variable function">handleMessageChange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">newMessage</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">setMessage</span><span class="token punctuation">(</span>newMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Parent Component</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ChildComponent</span></span> <span class="token attr-name">message</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>message<span class="token punctuation">}</span></span> <span class="token attr-name">onMessageChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleMessageChange<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> ParentComponent<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token comment">// 子组件</span>
<span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">ChildComponent</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> message<span class="token punctuation">,</span> onMessageChange <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token function-variable function">handleButtonClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">onMessageChange</span><span class="token punctuation">(</span><span class="token string">&#39;Hello from Child Component!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Child Component</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Message from Parent: </span><span class="token punctuation">{</span>message<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleButtonClick<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Change Message</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> ChildComponent<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，父组件（ParentComponent）通过props将<code>message</code>和<code>onMessageChange</code>函数传递给子组件（ChildComponent）。子组件接收到<code>message</code>后将其显示在页面上，并且点击按钮时调用<code>onMessageChange</code>函数来通知父组件更新<code>message</code>的值。</p><p>通过这种方式，父组件和子组件之间实现了数据的传递和事件的触发。当子组件中的按钮被点击时，子组件通过调用父组件传递的回调函数来改变父组件中的状态，从而实现了父子组件之间的通信。</p><h3 id="属性传递" tabindex="-1"><a class="header-anchor" href="#属性传递"><span>属性传递</span></a></h3><p>属性传递是一种常见的父子组件通信方式，在React中通过props来实现。通过将数据或函数作为props传递给子组件，可以让父组件向子组件传递信息。</p><p>下面是一个示例，展示了如何使用属性传递在父组件中向子组件传递数据和函数：</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token comment">// 父组件</span>
<span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> ChildComponent <span class="token keyword">from</span> <span class="token string">&#39;./ChildComponent&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">ParentComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">&#39;John Doe&#39;</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Button clicked!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Parent Component</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ChildComponent</span></span> <span class="token attr-name">name</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span> <span class="token attr-name">handleClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> ParentComponent<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token comment">// 子组件</span>
<span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">ChildComponent</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Child Component</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Name passed from parent: </span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>handleClick<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Click me</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> ChildComponent<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，父组件（ParentComponent）通过props向子组件（ChildComponent）传递了一个名为<code>name</code>的数据和名为<code>handleClick</code>的函数。子组件通过props接收这些属性，并根据需要去使用它们。</p><p>注意，通过props传递的属性名可以在子组件内部任意命名。在上述示例中，子组件使用了<code>props.name</code>和<code>props.handleClick</code>来访问父组件传递的<code>name</code>和<code>handleClick</code>。</p><p>通过属性传递，父组件可以向子组件传递任意类型的数据，包括基本数据类型、对象、函数等。子组件可以使用这些属性来渲染数据、调用函数、实现交互等。</p><p>子组件通过props接收到的属性是只读的，即不能直接修改。如果子组件需要修改父组件传递的数据，可以通过回调函数、状态提升等方式来实现。</p><h3 id="上下文-context-api" tabindex="-1"><a class="header-anchor" href="#上下文-context-api"><span>上下文（Context）API</span></a></h3><p>上下文（Context）API是React提供的一种机制，用于在组件树中共享数据，避免通过props一层层传递数据。</p><p>使用上下文API，你可以创建一个上下文（Context）对象来封装共享的数据。然后，你可以在组件树中的任何一个地方访问和更新这个上下文数据。</p><p>下面是一个简单的示例，展示了如何使用上下文API：</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token comment">// 创建上下文</span>
<span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> MyContext <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> MyContext<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token comment">// 父组件</span>
<span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> MyContext <span class="token keyword">from</span> <span class="token string">&#39;./MyContext&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> ChildComponent <span class="token keyword">from</span> <span class="token string">&#39;./ChildComponent&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">ParentComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> sharedData <span class="token operator">=</span> <span class="token string">&#39;Hello from parent!&#39;</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Parent Component</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MyContext.Provider</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>sharedData<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ChildComponent</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">MyContext.Provider</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> ParentComponent<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token comment">// 子组件</span>
<span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> MyContext <span class="token keyword">from</span> <span class="token string">&#39;./MyContext&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">ChildComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Child Component</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MyContext.Consumer</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token punctuation">{</span><span class="token parameter">sharedData</span> <span class="token operator">=&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Shared data: </span><span class="token punctuation">{</span>sharedData<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">}</span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">MyContext.Consumer</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> ChildComponent<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，我们首先创建了一个上下文对象<code>MyContext</code>。然后，在父组件（ParentComponent）中通过<code>MyContext.Provider</code>组件将共享的数据<code>sharedData</code>传递给所有子组件。子组件可以通过<code>MyContext.Consumer</code>组件来获取父组件传递的共享数据，并在函数内部进行渲染。</p><p>在<code>MyContext.Consumer</code>中，我们使用一个函数作为子组件，并将共享数据<code>sharedData</code>作为函数参数，然后在这个函数内部渲染需要的内容。</p><p>只有消费者组件（如<code>ChildComponent</code>）才能使用<code>MyContext.Consumer</code>来获取上下文数据。<code>MyContext.Provider</code>需要放置在消费者组件的父组件中，以确保数据的传递和共享。</p><p>使用上下文API可以更灵活地共享数据，在组件树中的任意位置获取父组件的数据，而不需要一层层通过props传递。然而，过度使用上下文API可能会导致组件耦合性增加，降低组件的可复用性，因此需要谨慎使用。</p><h3 id="发布订阅模式和事件总线" tabindex="-1"><a class="header-anchor" href="#发布订阅模式和事件总线"><span>发布订阅模式和事件总线</span></a></h3><p>发布-订阅模式（Publish-Subscribe Pattern）是一种软件设计模式，用于实现组件或模块间的解耦和通信。在该模式中，有两个核心角色：发布者（Publisher）和订阅者（Subscriber）。发布者负责发布事件或消息，而订阅者则订阅感兴趣的事件或消息，并在事件发生时做出相应的处理。</p><p>事件总线（Event Bus）是实现发布-订阅模式的一种常见方式，它充当了中介者的角色。事件总线提供了一种集中式的机制，用于管理事件的发布和订阅，使组件间的通信更加简单和灵活。</p><p>下面是一个简单的示例，展示了如何使用事件总线实现发布-订阅模式：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 事件总线</span>
<span class="token keyword">import</span> mitt <span class="token keyword">from</span> <span class="token string">&#39;mitt&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> eventBus <span class="token operator">=</span> <span class="token function">mitt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> eventBus<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 发布者</span>
<span class="token keyword">import</span> eventBus <span class="token keyword">from</span> <span class="token string">&#39;./eventBus&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// 发布事件</span>
eventBus<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;eventA&#39;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 订阅者</span>
<span class="token keyword">import</span> eventBus <span class="token keyword">from</span> <span class="token string">&#39;./eventBus&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// 订阅事件</span>
eventBus<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;eventA&#39;</span><span class="token punctuation">,</span> handleEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 事件处理函数</span>
<span class="token keyword">function</span> <span class="token function">handleEvent</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 处理事件</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，我们使用了一个第三方库<code>mitt</code>来创建一个事件总线<code>eventBus</code>。发布者可以使用<code>eventBus.emit</code>方法来发布指定的事件，并传递相应的数据。订阅者可以使用<code>eventBus.on</code>方法来订阅感兴趣的事件，并提供一个事件处理函数。当事件被发布时，订阅者的事件处理函数将被调用，并传递相应的数据。</p><p>通过事件总线，发布者和订阅者之间解耦，发布者只需要关心事件的发布，而不需要关心具体的订阅者。订阅者只需要关心自己感兴趣的事件，并提供相应的事件处理函数。</p><p>事件总线还可以用于跨组件通信，从而简化组件之间的通信逻辑。不同组件可以通过订阅感兴趣的事件来接收数据，并通过发布事件的方式向其他组件发送数据。</p><p>事件总线是全局的，因此需要避免滥用。过度使用事件总线可能会导致代码的维护困难和调试问题，所以需要谨慎使用，并合理规划你的事件名称和事件数据。</p><h2 id="hooks" tabindex="-1"><a class="header-anchor" href="#hooks"><span>Hooks</span></a></h2><h3 id="什么是hooks" tabindex="-1"><a class="header-anchor" href="#什么是hooks"><span>什么是Hooks</span></a></h3><p>Hooks是React 16.8版本引入的新特性，它允许你在函数式组件中使用状态（state）和其他React的特性。在之前的版本中，函数式组件没有内置的状态管理，需要使用类组件来管理状态。但是，使用类组件会引入一些额外的复杂性和冗余代码。</p><p>Hooks的引入解决了这个问题，它提供了一组用于在函数式组件中使用状态和其他特性的函数。</p><p>Hooks 在很大程度上简化了在函数式组件中处理状态和副作用的逻辑。通过使用Hooks，你可以编写更简洁、易于理解和维护的代码，并享受到更好的开发体验。</p><p>Hooks只能在函数式组件的顶层调用，不能在循环、条件或嵌套的函数中调用。这是为了确保Hook的执行顺序一致，并避免状态的错乱和混乱。</p><h3 id="常用的hooks函数-usestate、useeffect等" tabindex="-1"><a class="header-anchor" href="#常用的hooks函数-usestate、useeffect等"><span>常用的Hooks函数：useState、useEffect等</span></a></h3><p>是的，常用的Hooks函数包括useState、useEffect等。下面我会分别介绍这些常用的Hooks函数及其用法：</p><ol><li>useState: useState是React提供的一个Hook，用于在函数式组件中添加和管理状态。它接收一个初始状态作为参数，并返回一个包含当前状态值和一个更新状态的函数的数组。可以通过调用更新状态的函数来改变状态的值。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">Counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token function-variable function">increment</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>Count<span class="token operator">:</span> <span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>increment<span class="token punctuation">}</span><span class="token operator">&gt;</span>Increment<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们使用useState创建了一个名为count的状态变量和一个名为setCount的更新状态的函数。每次点击按钮时，调用increment函数会将count的值增加1，从而更新界面上的计数。</p><ol start="2"><li>useEffect: useEffect用于处理副作用操作，比如执行订阅、数据获取等。它接收一个副作用函数和一个依赖项数组作为参数。副作用函数在组件渲染到屏幕上后执行，并且可以返回一个清理函数用于取消副作用。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useEffect<span class="token punctuation">,</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">DataFetcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>data<span class="token punctuation">,</span> setData<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 执行副作用操作</span>
    <span class="token keyword">const</span> <span class="token function-variable function">fetchData</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;https://api.example.com/data&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">setData</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 返回一个清理函数</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// 在组件卸载或重新渲染时执行清理操作</span>
      <span class="token comment">// 可以取消订阅、清除计时器等</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
      <span class="token punctuation">{</span>data <span class="token operator">?</span> <span class="token punctuation">(</span>
        <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>Data<span class="token operator">:</span> <span class="token punctuation">{</span>data<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>
      <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>
        <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>Loading data<span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>
      <span class="token punctuation">)</span><span class="token punctuation">}</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>useEffect函数用于异步获取数据，并通过setData函数更新组件的状态。我们使用一个空的依赖项数组([])，表示副作用只在组件挂载时执行一次。 当然，还有其他常用的Hooks函数。</p><ol start="3"><li>useContext: useContext用于在函数式组件中访问Context（上下文）的值。它接收一个Context对象作为参数，并返回该Context的当前值。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> ThemeContext <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span><span class="token string">&#39;light&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">ThemeComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> theme <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>ThemeContext<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>Current theme<span class="token operator">:</span> <span class="token punctuation">{</span>theme<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们创建了一个名为ThemeContext的Context对象，并将其默认值设置为&#39;light&#39;。在ThemeComponent中，通过调用useContext(ThemeContext)来获取当前的主题值。</p><ol start="4"><li>useRef: useRef用于在函数式组件中创建一个可变的引用。它返回一个对象，该对象的current属性可以被赋值为任意值。这个引用在组件重新渲染时不会改变。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useRef <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">TextInput</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> inputRef <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token function-variable function">focusInput</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    inputRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">&quot;text&quot;</span> ref<span class="token operator">=</span><span class="token punctuation">{</span>inputRef<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>focusInput<span class="token punctuation">}</span><span class="token operator">&gt;</span>Focus<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们使用useRef创建了一个名为inputRef的引用。当点击按钮时，调用focusInput函数将焦点设置到input元素上。</p><ol start="5"><li>useReducer: useReducer用于在函数式组件中管理复杂的状态逻辑。它类似于Redux中的reducer函数，接收一个reducer函数和初始状态作为参数，并返回当前状态和一个dispatch函数，用于触发状态更新。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useReducer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// 定义reducer函数</span>
<span class="token keyword">function</span> <span class="token function">reducer</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token string">&#39;INCREMENT&#39;</span><span class="token operator">:</span>
      <span class="token keyword">return</span> state <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token string">&#39;DECREMENT&#39;</span><span class="token operator">:</span>
      <span class="token keyword">return</span> state <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
      <span class="token keyword">return</span> state<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">Counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> dispatch<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useReducer</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token function-variable function">increment</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;INCREMENT&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token function-variable function">decrement</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;DECREMENT&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>Count<span class="token operator">:</span> <span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>increment<span class="token punctuation">}</span><span class="token operator">&gt;</span>Increment<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>decrement<span class="token punctuation">}</span><span class="token operator">&gt;</span>Decrement<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们定义了一个reducer函数来处理状态的更新逻辑。通过useReducer将reducer函数和初始状态0传递进去，然后通过dispatch函数来触发状态更新。</p><ol start="6"><li>useCallback: useCallback用于优化函数的性能，它接收一个回调函数和一个依赖项数组，返回一个被记忆化的回调函数。只有当依赖项发生变化时，才会重新创建回调函数。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useCallback<span class="token punctuation">,</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">ParentComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> increment <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>Count<span class="token operator">:</span> <span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>ChildComponent increment<span class="token operator">=</span><span class="token punctuation">{</span>increment<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">ChildComponent</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> increment <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>increment<span class="token punctuation">}</span><span class="token operator">&gt;</span>Increment<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的示中，我们使用useCallback创建一个记忆化的increment回调函数。依赖项数组[count]指定了该回调函数所依赖的状态。只有当count发生变化时，increment才会重新创建。</p><ol start="7"><li>useMemo: useMemo用于缓存计算结果，它接收一个回调函数和一个依赖项数组，返回一个缓存的值。只有当依赖项发生变化时，才会重新计算值。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useMemo <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">ExpensiveComponent</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> a<span class="token punctuation">,</span> b <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;calculating...&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>Result<span class="token operator">:</span> <span class="token punctuation">{</span>result<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们使用useMemo来缓存a + b的计算结果。只有当a或b发生变化时，才会重新计算结果。</p><ol start="8"><li>useLayoutEffect: useLayoutEffect与useEffect非常相似，但会在DOM更新之后同步触发。它在DOM更新前同步执行，可以使用它来读取DOM节点的布局信息，或者在DOM更新之后执行同步任务。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useLayoutEffect<span class="token punctuation">,</span> useRef<span class="token punctuation">,</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">measureHeight</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> height <span class="token punctuation">}</span> <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> height<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">HeightMeasurement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>height<span class="token punctuation">,</span> setHeight<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> contentRef <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">useLayoutEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> measuredHeight <span class="token operator">=</span> <span class="token function">measureHeight</span><span class="token punctuation">(</span>contentRef<span class="token punctuation">.</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setHeight</span><span class="token punctuation">(</span>measuredHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>div ref<span class="token operator">=</span><span class="token punctuation">{</span>contentRef<span class="token punctuation">}</span><span class="token operator">&gt;</span>This is some content<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>Height<span class="token operator">:</span> <span class="token punctuation">{</span>height<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们使用useLayoutEffect来在DOM更新之后同步测量内容的高度。在组件挂载期间（由于传入了空依赖项数组），useLayoutEffect会在DOM更新前同步触发measureHeight函数，并更新height状态。</p><ol start="9"><li>useImperativeHandle: useImperativeHandle用于在父组件中自定义向子组件公开的实例值或方法。它允许你指定子组件实例的暴露给父组件的api。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> forwardRef<span class="token punctuation">,</span> useImperativeHandle<span class="token punctuation">,</span> useRef <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> ChildComponent <span class="token operator">=</span> <span class="token function">forwardRef</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> ref</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> childRef <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">useImperativeHandle</span><span class="token punctuation">(</span>ref<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token function-variable function">focusChild</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      childRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function-variable function">resetChild</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      childRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">&quot;text&quot;</span> ref<span class="token operator">=</span><span class="token punctuation">{</span>childRef<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">ParentComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> childRef <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token function-variable function">handleFocus</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    childRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">focusChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token function-variable function">handleReset</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    childRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">resetChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>ChildComponent ref<span class="token operator">=</span><span class="token punctuation">{</span>childRef<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>handleFocus<span class="token punctuation">}</span><span class="token operator">&gt;</span>Focus Child Input<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>handleReset<span class="token punctuation">}</span><span class="token operator">&gt;</span>Reset Child Input<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们通过useImperativeHandle定义了子组件（ChildComponent）向父组件（ParentComponent）暴露的api。父组件可以通过ref来调用这些暴露出来的方法。</p><h3 id="自定义hooks" tabindex="-1"><a class="header-anchor" href="#自定义hooks"><span>自定义Hooks</span></a></h3><p>自定义Hooks是一种让你在函数组件之间重用状态逻辑的方式。你可以根据自己的需求创建自定义Hooks，它可以包含其他的Hooks，也可以包含普通的JavaScript函数。</p><p>下面是创建自定义Hooks的一般步骤：</p><ol><li><p>命名规则：自定义Hooks的名称应该以&quot;use&quot;开头，这样可以清楚地表示它是一个自定义Hooks。</p></li><li><p>创建逻辑：在自定义Hooks中，你可以使用任何的Hooks和其他逻辑来定义你的状态逻辑。例如，你可以使用useState、useEffect等Hooks。</p></li><li><p>返回值：自定义Hooks应该返回一组可以在组件中使用的值。这可以是一个状态值，也可以是一个函数等，具体取决于你的需求。</p></li></ol><p>下面是一个简单的例子，展示了如何创建一个自定义的计数器Hooks：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">useCounter</span><span class="token punctuation">(</span><span class="token parameter">initialCount</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>initialCount<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token function-variable function">increment</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">setCount</span><span class="token punctuation">(</span><span class="token parameter">prevCount</span> <span class="token operator">=&gt;</span> prevCount <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token function-variable function">decrement</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">setCount</span><span class="token punctuation">(</span><span class="token parameter">prevCount</span> <span class="token operator">=&gt;</span> prevCount <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> increment<span class="token punctuation">,</span> decrement<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，我们创建了一个名为useCounter的自定义Hooks。它使用useState创建了一个名为count的状态变量，并返回了一个包含count的数组以及两个操作count变量的函数：increment和decrement。</p><p>现在可以在任何组件中使用useCounter自定义Hooks：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> useCounter <span class="token keyword">from</span> <span class="token string">&#39;./useCounter&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">Counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> increment<span class="token punctuation">,</span> decrement<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useCounter</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>Count<span class="token operator">:</span> <span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>increment<span class="token punctuation">}</span><span class="token operator">&gt;</span>Increment<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>decrement<span class="token punctuation">}</span><span class="token operator">&gt;</span>Decrement<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，我们在Counter组件中使用了useCounter自定义Hooks，通过解构赋值获取了count、increment和decrement，并在组件中使用它们。</p><p>通过自定义Hooks，你可以将组件间共享的逻辑提取出来，使得代码更加清晰、可复用。同时，它也使得逻辑的测试和维护更加容易。记得在设计自定义Hooks时，要考虑到Hooks的命名规范，并且尽量遵循Hooks的规则。</p><h3 id="hooks的使用注意事项" tabindex="-1"><a class="header-anchor" href="#hooks的使用注意事项"><span>Hooks的使用注意事项</span></a></h3><p>在使用Hooks时需要注意以下几个事项：</p><ol><li><p>Hooks只能在函数组件中使用：Hooks只能在函数组件中使用，不能在类组件中使用。这是因为Hooks是基于函数组件的新特性，它利用了函数组件的闭包特性来存储状态和处理逻辑。</p></li><li><p>顺序重要：在使用多个Hooks时，要确保它们的调用顺序是稳定的，不能在条件语句或循环中使用Hooks，因为这样会破坏它们的顺序。React依赖于Hooks的顺序来确保每个Hook的状态对应正确的组件实例。</p></li><li><p>Hooks只能在顶层使用：Hooks不能在嵌套的函数内部使用，应该将所有的Hook调用放在组件函数的顶层。这样可以确保每次组件渲染时，Hook的调用顺序稳定，避免产生难以追踪的bug。</p></li><li><p>使用规则：按照React官方的规范，Hooks的调用必须遵循一些特定的规则。例如，Hook的调用不能在条件语句中（可以使用条件表达式），也不能在循环语句中使用。另外，Hooks的调用必须在函数组件的顶层，并且不得在普通的JavaScript函数中使用。</p></li><li><p>自定义Hooks命名规范：如果你创建了自定义Hooks，要遵循以&quot;use&quot;开头的命名规范，这样可以清楚地表示它是一个自定义Hooks。</p></li><li><p>版本要求：使用Hooks需要确保React的版本不低于16.8.0。</p></li><li><p>Hooks的性能优化：在某些情况下，Hooks的调用会导致额外的重渲染，可能会影响性能。为了避免这种情况，可以使用React.memo()或useMemo()等技术来优化组件的性能。</p></li><li><p>参与依赖：如果你在自定义Hooks中使用了其他的Hooks（如useState、useEffect等），那么它们共享的状态和逻辑将通过闭包的方式与自定义Hooks形成依赖关系。</p></li></ol><h2 id="性能优化" tabindex="-1"><a class="header-anchor" href="#性能优化"><span>性能优化</span></a></h2><h3 id="virtual-dom的原理和优势" tabindex="-1"><a class="header-anchor" href="#virtual-dom的原理和优势"><span>Virtual DOM的原理和优势</span></a></h3><p>Virtual DOM（虚拟DOM）是React框架的核心概念之一，它在React中起到了重要的作用。下面是Virtual DOM的原理和优势：</p><p>Virtual DOM的原理：</p><ol><li>虚拟DOM是一个轻量级的JavaScript对象，它是对实际DOM的抽象表示。</li><li>当应用的状态发生变化时，React会首先生成一个新的虚拟DOM树，与之前的虚拟DOM树进行比较。</li><li>React会找出两个虚拟DOM树之间的差异，并只把实际DOM中需要变动的部分更新。</li><li>这种差异计算的方式可以最小化对实际DOM的操作，从而提高性能和效率。</li></ol><p>Virtual DOM的优势：</p><ol><li><p>提高性能：由于实际DOM操作是非常昂贵的，Virtual DOM可以通过批量更新的方式减少对实际DOM的操作次数，从而提高性能。Virtual DOM会在内部使用算法来最小化对实际DOM的修改，只更新真正需要变动的部分，而不是整个页面。</p></li><li><p>简化开发：Virtual DOM提供了一种声明式的方式来描述想要渲染的UI。你只需要关注数据的变化，并用React组件来描述UI的结构和状态，而无需手动操作DOM。这样简化了开发流程，提高了开发效率。</p></li><li><p>跨平台：由于Virtual DOM是一个独立于平台的抽象层，可以在不同的平台上使用相同的代码。React Native就是一个例子，它使用Virtual DOM来实现在移动端的UI渲染。</p></li><li><p>组件化开发：React的组件化开发模式和Virtual DOM紧密结合，可以将复杂的UI拆分成独立的组件，并对每个组件进行单独的状态管理、事件处理和渲染控制。这使得代码更加可维护、可复用，提高了开发效率。</p></li><li><p>更好的用户体验：由于React使用Virtual DOM和高效的差异算法，它能够提供快速、流畅的用户体验。在组件状态变化时，React能够快速更新变化的部分，减少页面的闪烁和卡顿。</p></li></ol><p>总的来说，使用Virtual DOM可以通过减少实际DOM操作、提高开发效率和提供更好的用户体验等优势，使得React成为一个流行的前端开发框架。</p><h3 id="使用key属性进行性能优化" tabindex="-1"><a class="header-anchor" href="#使用key属性进行性能优化"><span>使用key属性进行性能优化</span></a></h3><p>使用<code>key</code>属性可以对React元素列表的性能进行优化。<code>key</code>属性是在React元素列表中唯一标识每个列表项的属性。如何使用<code>key</code>属性进行性能优化的一些指导原则：</p><ol><li><p>提供稳定的标识符：确保为每个元素提供一个稳定的、唯一的<code>key</code>值。理想情况下，使用每个列表项的唯一ID作为<code>key</code>值。这可以使用字符串、数字或基于对象唯一标识符（比如<code>id</code>属性）来实现。</p></li><li><p>避免使用索引作为<code>key</code>值：使用索引作为<code>key</code>值是一种常见的误用。尽量避免将索引作为<code>key</code>值，因为在列表的插入、删除或排序等操作时，相同索引位置的元素可能会发生变化，导致React重新创建和渲染这个元素。</p></li><li><p>指定唯一性：确保<code>key</code>属性的值在同一个列表内是唯一的。如果多个元素共享相同的<code>key</code>值，可能会导致React在更新列表时出现错误或不一致的行为。</p></li><li><p>不要过度依赖<code>key</code>属性：<code>key</code>属性主要用于React在进行列表更新时识别和比较元素。它不应该被用于组件的状态或用途等其他用途。不要过度关注<code>key</code>属性的值，而是更关注其在列表中的唯一性和稳定性。</p></li></ol><p>使用<code>key</code>属性可以帮助React更准确地确定哪些元素需要更新、添加或删除，以提高列表渲染的性能。当列表项改变顺序或数量时，React会基于<code>key</code>属性来决定更新的方式，并尽量最小化对DOM的操作。这样可以避免重新创建和渲染整个列表，提高性能和用户体验。</p><h3 id="purecomponent和memo组件" tabindex="-1"><a class="header-anchor" href="#purecomponent和memo组件"><span>PureComponent和memo组件</span></a></h3><p><code>PureComponent</code>和<code>memo</code>都是React中用于性能优化的组件包装器。它们都可以在某些情况下避免不必要的重新渲染，以提高应用程序的性能。下面是它们的介绍和使用场景：</p><ol><li>PureComponent： <code>PureComponent</code>是React中的一个基类组件，它自动实现了<code>shouldComponentUpdate</code>方法，用于进行浅层的props和state比较。如果当前和前一个渲染的props和state相等，<code>PureComponent</code>会阻止组件重新渲染，提高性能。</li></ol><p>使用场景：</p><ul><li>当props和state的数据是不可变的，或者通过深层比较可以轻松确定它们的变化时，可以将组件包装为<code>PureComponent</code>。</li><li>适用于大多数简单的展示性组件，它们主要依赖props而不是内部状态。</li><li>不适用于使用引用类型数据（如数组、对象）的情况，因为浅层比较可能会造成误判。</li></ul><p>示例代码：</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>PureComponent</span> <span class="token punctuation">{</span>
  <span class="token comment">// 省略其他方法...</span>

  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>text<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>memo： <code>memo</code>是一个高阶组件，它类似于<code>PureComponent</code>，但用于函数式组件。<code>memo</code>接收一个组件作为参数，并返回一个具有性能优化的新组件。<code>memo</code>会对组件的props进行浅层比较，如果<code>props</code>没有变化，则阻止组件重新渲染。</li></ol><p>使用场景：</p><ul><li>适用于函数式组件，特别是当函数组件接收的props有限且不可变时。</li><li>可以用于包裹那些在相同输入下保持相同输出的纯展示组件。</li></ul><p>示例代码：</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> MyComponent <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">memo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> text <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>text<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用<code>PureComponent</code>和<code>memo</code>可以有效减少组件的不必要渲染，提高应用程序的性能。然而，这些优化方法并非适用于所有组件或所有情况。在使用这些优化方法之前，最好进行性能测试和分析，确定其是否适合特定的组件以及是否能够带来明显的性能提升。</p><h3 id="使用shouldcomponentupdate进行手动优化" tabindex="-1"><a class="header-anchor" href="#使用shouldcomponentupdate进行手动优化"><span>使用shouldComponentUpdate进行手动优化</span></a></h3><p>在React中，<code>shouldComponentUpdate</code>方法可以用于手动优化组件的渲染过程。<code>shouldComponentUpdate</code>是一个生命周期方法，在组件准备更新前被调用，用于判断组件是否需要重新渲染。通过在<code>shouldComponentUpdate</code>方法中进行自定义逻辑判断，可以避免不必要的重新渲染，从而提高组件的性能。</p><p>下面是使用<code>shouldComponentUpdate</code>进行手动优化的一般步骤：</p><ol><li>在组件中定义<code>shouldComponentUpdate</code>方法，并接收两个参数：<code>nextProps</code>和<code>nextState</code>，用于表示下一个即将更新的props和state。</li></ol><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token comment">// 其他生命周期方法...</span>

  <span class="token function">shouldComponentUpdate</span><span class="token punctuation">(</span><span class="token parameter">nextProps<span class="token punctuation">,</span> nextState</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 进行自定义逻辑判断，返回一个布尔值来决定是否重新渲染组件</span>

    <span class="token comment">// 例如，比较当前和下一个props的某些属性</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>someProp <span class="token operator">!==</span> nextProps<span class="token punctuation">.</span>someProp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// 需要重新渲染</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 默认情况下，不重新渲染</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 渲染组件</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><p>在<code>shouldComponentUpdate</code>方法中编写适当的逻辑，比较当前和下一个props以及state的值。根据这些值的变化情况，决定是否返回<code>true</code>（重新渲染）或<code>false</code>（不重新渲染）。</p></li><li><p><code>shouldComponentUpdate</code>方法的返回值会影响组件是否重新渲染。如果返回<code>false</code>，则组件不会重新渲染；如果返回<code>true</code>，则组件会继续执行后续的生命周期方法，进行更新。</p></li></ol><p>需要注意以下几点：</p><ul><li>在编写<code>shouldComponentUpdate</code>方法时，确保逻辑判断是准确的和高效的，避免引入不必要的复杂性和性能问题。</li><li>在使用<code>shouldComponentUpdate</code>方法进行手动优化时，要特别注意对比引用类型（如数组、对象）的变化，因为对于引用类型，默认的浅层比较可能会导致误判。在这种情况下，需要自行实现深层比较或使用帮助函数（如<code>lodash</code>中的<code>isEqual</code>）来确保准确的比较。</li></ul><p>手动优化的好处是可以精确地控制组件的重新渲染，避免不必要的开销。然而，需要注意的是过度的手动优化也可能带来代码复杂性和维护难度，因此在使用<code>shouldComponentUpdate</code>方法进行手动优化时需要权衡利弊，确保真正需要进行优化并能够带来明显的性能提升。</p><h3 id="减少渲染次数" tabindex="-1"><a class="header-anchor" href="#减少渲染次数"><span>减少渲染次数</span></a></h3><ol><li><p>使用<code>shouldComponentUpdate</code>或<code>React.memo</code>：在组件内部实现<code>shouldComponentUpdate</code>方法来手动判断组件是否需要重新渲染。或者，如果你使用函数式组件，可以使用<code>React.memo</code>包装组件来进行浅层比较，避免不必要的重新渲染。</p></li><li><p>使用合适的数据结构：优化组件的渲染可以通过选择合适的数据结构来避免不必要的渲染。对于列表或集合等数据，使用对象或集合类型的数据结构，例如<code>Map</code>或<code>Set</code>，可以在元素的插入、删除和查找等操作上提供更好的性能。</p></li><li><p>避免无关的重新渲染：如果一个组件只依赖于部分props或state，可以将这些相关数据提升到它们共同的父组件中，以避免不必要的重新渲染。另外，使用合适的组件拆分方法，将大型组件拆分成更小的子组件，只在需要更新的时候更新相应的子组件。</p></li><li><p>使用React的<code>useCallback</code>和<code>useMemo</code>钩子：使用<code>useCallback</code>来缓存回调函数，以防止在每次渲染时创建新的函数实例。使用<code>useMemo</code>来缓存计算结果，以防止在每次渲染时重新计算。这些钩子可以减少渲染次数，提高性能。</p></li><li><p>使用React的<code>useEffect</code>钩子：使用<code>useEffect</code>来仅在特定条件下触发副作用逻辑。通过指定依赖项，可以控制副作用逻辑的执行时机，避免不必要的副作用触发。</p></li><li><p>使用<code>React.PureComponent</code>或优化的函数组件：使用<code>React.PureComponent</code>类或通过手动编写<code>shouldComponentUpdate</code>来确保组件只在其props或state发生实际变化时才进行重新渲染。</p></li><li><p>使用虚拟化技术：对于大型列表或表格等长列表，可以使用虚拟化技术，例如<code>react-virtualized</code>库，只渲染可见区域的元素，而不是所有元素。</p></li></ol><h3 id="使用生命周期方法和effect钩子进行异步加载" tabindex="-1"><a class="header-anchor" href="#使用生命周期方法和effect钩子进行异步加载"><span>使用生命周期方法和Effect钩子进行异步加载</span></a></h3><ol><li>使用生命周期方法进行异步加载（适用于类组件）：</li></ol><p>在类组件中，可以使用<code>componentDidMount</code>生命周期方法来进行异步加载数据。它会在组件挂载后立即被调用，可以在这个方法中发起异步请求并更新组件的状态。</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 发起异步请求获取数据</span>
    <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// 更新组件的状态</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> data <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// 错误处理</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 渲染组件...</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，<code>componentDidMount</code>方法被调用时，异步请求会被触发。在请求成功后，通过<code>setState</code>方法更新组件的状态，触发重新渲染。</p><ol start="2"><li>使用Effect钩子进行异步加载（适用于函数式组件）：</li></ol><p>在函数式组件中，可以使用Effect钩子（例如<code>useEffect</code>）来进行异步加载数据。可以在Effect钩子的回调函数中发起异步请求并更新组件状态。</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">MyComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>data<span class="token punctuation">,</span> setData<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 在组件挂载后发起异步请求</span>
    <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// 更新组件状态</span>
        <span class="token function">setData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// 错误处理</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 传递一个空数组作为依赖项，表示只在组件挂载和卸载时执行一次</span>

  <span class="token comment">// 渲染组件...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，<code>useEffect</code>钩子的回调函数会在组件挂载后执行。通过在依赖数组<code>[]</code>中传递一个空数组，可以确保回调函数只在组件挂载和卸载时执行一次，避免多次触发。在异步请求成功后，使用<code>setData</code>函数更新组件状态。</p><p>无论是使用生命周期方法还是Effect钩子，都可以在异步请求成功后更新组件的状态，从而触发重新渲染，展示加载的数据。要处理可能的错误情况，并在组件卸载时取消挂起的异步请求以防止内存泄漏。</p><h3 id="懒加载和按需加载" tabindex="-1"><a class="header-anchor" href="#懒加载和按需加载"><span>懒加载和按需加载</span></a></h3><p>懒加载（Lazy Loading）和按需加载（On-Demand Loading）是前端优化的两个常用技术，它们可以帮助减少初始加载时间和提高应用性能。</p><ol><li>懒加载（Lazy Loading）： 懒加载是一种延迟加载技术，它允许将页面或组件的部分内容延迟到实际需要时再加载。懒加载通常用于加速初始页面加载，减少网络请求和资源的使用。</li></ol><p>在React中，可以使用React.lazy和Suspense组件来实现懒加载。React.lazy允许你以动态的方式引入一个组件，而Suspense组件则可以在懒加载完成前显示一个加载状态。</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Suspense <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// 懒加载组件</span>
<span class="token keyword">const</span> MyComponent <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">lazy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./MyComponent&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Suspense</span></span> <span class="token attr-name">fallback</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Loading...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MyComponent</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Suspense</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，通过React.lazy和import函数将MyComponent组件进行懒加载。在Suspense组件中，可以通过fallback属性指定一个加载状态，当懒加载完成前会显示该状态。</p><ol start="2"><li>按需加载（On-Demand Loading）： 按需加载是一种将代码分割成不同块并在需要时动态加载的技术，它可以根据用户的操作或需要来加载所需的代码模块，减小初始加载的体积。</li></ol><p>在React中，可以使用Webpack等打包工具的代码分割功能来实现按需加载。通过使用动态导入（Dynamic import）来引入组件或模块，Webpack会将其单独打包成一个块，然后在需要时再加载。</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>showComponent<span class="token punctuation">,</span> setShowComponent<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token function-variable function">loadComponent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./MyComponent&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">module</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// 加载完成后显示组件</span>
        <span class="token function">setShowComponent</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// 错误处理</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>loadComponent<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Load Component</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token punctuation">{</span>showComponent <span class="token operator">&amp;&amp;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MyComponent</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">}</span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，通过动态导入（import）的方式异步加载MyComponent组件。点击按钮时，触发loadComponent函数，在加载完成后通过设置showComponent状态变量来显示组件。</p><p>懒加载和按需加载都是优化前端性能的重要手段，可以根据实际需求和场景选择合适的技术来延迟加载、降低初始加载时间，提升用户体验。</p><h3 id="使用memoized函数和记忆化技术" tabindex="-1"><a class="header-anchor" href="#使用memoized函数和记忆化技术"><span>使用Memoized函数和记忆化技术</span></a></h3><p>Memoized函数和记忆化技术是一种优化方法，可以有效地缓存函数的结果，避免重复计算，提高性能。</p><ol><li>Memoized函数： Memoized函数是指在函数的计算过程中，将函数的输入和对应的输出结果进行缓存，以便在后续调用中可以直接返回缓存结果，避免重复计算。</li></ol><p>在JavaScript中，可以通过闭包、高阶函数或使用第三方库（如lodash）来实现Memoized函数。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">memoizedFunction</span><span class="token punctuation">(</span><span class="token parameter">func</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> key <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
      cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> result<span class="token punctuation">;</span>
      <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 示例使用</span>
<span class="token keyword">const</span> memoizedAdd <span class="token operator">=</span> <span class="token function">memoizedFunction</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Calculating...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">memoizedAdd</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 第一次计算，并返回 3</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">memoizedAdd</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 直接返回缓存结果 3</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">memoizedAdd</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 第一次计算，并返回 5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，<code>memoizedFunction</code>函数接受一个普通的函数作为参数，并返回一个新的函数。新函数使用闭包保存一个缓存对象<code>cache</code>，在每次调用时，根据参数生成一个唯一的<code>key</code>，然后检查缓存中是否存在对应的结果，如果存在则直接返回缓存结果，否则计算函数结果并保存到缓存中。</p><ol start="2"><li>记忆化技术： 记忆化技术是一种通用的优化技术，它可以应用于各种复杂的计算过程，包括递归函数、动态规划等。记忆化技术通过缓存中间结果，避免重复计算，提高执行效率。</li></ol><p>在JavaScript中，可以使用Memoized函数或使用函数装饰器等方式来实现记忆化技术。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// Memoized函数的例子</span>
<span class="token keyword">function</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">||</span> n <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> n<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> memoizedFibonacci <span class="token operator">=</span> <span class="token function">memoizedFunction</span><span class="token punctuation">(</span>fibonacci<span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">memoizedFibonacci</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 第一次计算，并返回结果</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">memoizedFibonacci</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 直接返回缓存结果</span>

<span class="token comment">// 装饰器的例子</span>
<span class="token keyword">function</span> <span class="token function">memoize</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> name<span class="token punctuation">,</span> descriptor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> originalMethod <span class="token operator">=</span> descriptor<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
  <span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

  descriptor<span class="token punctuation">.</span><span class="token function-variable function">value</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> key <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">originalMethod</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
      cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> result<span class="token punctuation">;</span>
      <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> descriptor<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span>
  @memoize
  <span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">||</span> n <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> n<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">fibonacci</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">fibonacci</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> myObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myObj<span class="token punctuation">.</span><span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 第一次计算，并返回结果</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myObj<span class="token punctuation">.</span><span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 直接返回缓存结果</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，<code>fibonacci</code>函数使用Memoized函数的方式进行记忆化，缓存了中间计算结果，避免重复计算。另外，通过使用装饰器，可以在类的方法上应用记忆化技术，实现类似的效果。</p><p>Memoized函数和记忆化技术可以应用于任何需要缓存的函数计算过程，可以在性能敏感的场景中显著提升程序的执行效率。但需要注意，记</p><h3 id="使用分页和虚拟滚动" tabindex="-1"><a class="header-anchor" href="#使用分页和虚拟滚动"><span>使用分页和虚拟滚动</span></a></h3><p>分页和虚拟滚动是两种常用的优化技术，用于处理大量数据的展示和滚动问题。</p><ol><li>分页： 分页是将大量的数据划分为多个页面进行展示的一种方式。每个页面只包含一部分数据，可以通过点击页面切换或使用页码进行导航。分页可以减少一次性加载大量数据而导致的性能问题，同时使用户能够更方便地浏览和操作数据。</li></ol><p>在前端开发中，可以使用库或框架提供的分页组件实现分页功能，也可以自行编写代码进行分页逻辑实现。一般的分页实现包括以下几个步骤：</p><ul><li>根据数据总量和每页显示的数据量计算总页数。</li><li>根据当前页数和每页显示的数据量计算当前页面的数据范围。</li><li>根据当前页面的数据范围从整个数据集合中筛选出要展示的数据。</li><li>使用分页组件或自定义UI展示当前页面的数据，并提供翻页功能。</li></ul><ol start="2"><li>虚拟滚动： 虚拟滚动是一种技术，用于优化大量数据的滚动展示。通常情况下，滚动容器（如列表或表格）中的所有数据都会被渲染到DOM中，这会导致性能问题，尤其是在数据量很大的情况下。虚拟滚动通过只渲染可见部分的数据，而延迟渲染不可见部分，从而减少DOM的数量和渲染开销，提高滚动的性能和响应速度。</li></ol><p>在前端开发中，可以使用现成的虚拟滚动库或自行编写代码实现虚拟滚动。一般的虚拟滚动实现包括以下几个步骤：</p><ul><li>获取滚动容器的可见高度。</li><li>根据每条数据的高度和总数据量，计算出滚动容器的实际高度。</li><li>根据滚动容器的滚动位置，计算出当前可见的数据范围。</li><li>只渲染当前可见数据范围内的数据到DOM中，延迟渲染不可见部分的数据。</li><li>动态调整滚动容器的实际高度，以适应总数据量的变化。</li><li>监听滚动事件，根据滚动位置的变化更新可见数据范围。</li></ul><p>虚拟滚动可以极大地优化大量数据的滚动展示性能，减少DOM操作和渲染开销。常见的虚拟滚动库包括React Virtualized、Vue Virtual Scroller等。</p><p>综上所述，分页和虚拟滚动是处理大量数据展示和滚动问题的常用优化技术。通过使用分页和虚拟滚动，可以提高用户体验并减少性能问题。</p><h3 id="图片优化" tabindex="-1"><a class="header-anchor" href="#图片优化"><span>图片优化</span></a></h3><p>图片优化是为了减小图片的文件大小，提高网页加载速度和用户体验的一种常用技术。</p><ol><li><p>压缩图片： 压缩图片是最常见也是最有效的图片优化方法之一。可以使用图片编辑工具（如Adobe Photoshop、GIMP等）或在线图片压缩工具压缩图片的文件大小，减少图片的质量损失。常用的压缩方法包括无损压缩和有损压缩。无损压缩通过去除图片中的冗余数据和无用信息来减小文件大小，而不会损失图片的视觉质量。有损压缩则是通过牺牲一定程度的视觉质量来进一步减小文件大小。</p></li><li><p>使用适当的图片格式： 选择适当的图片格式也是图片优化的重要一环。不同的图片格式适合不同的场景和要求。常见的图片格式包括JPEG、PNG和GIF等。</p></li></ol><ul><li>JPEG（或JPG）是一种有损压缩的格式，适用于展示照片和复杂的图像，能够在保持较高视觉质量的同时减小文件大小。</li><li>PNG是一种无损压缩的格式，适用于展示简单的图像和含有透明背景的图像，提供较高的视觉质量和细节清晰度。</li><li>GIF适用于展示简单动画和带有透明背景的图像，但是在颜色深度和视觉质量方面较JPEG和PNG有限。</li></ul><p>选择适当的图片格式可以在保证视觉质量的同时减小文件大小，提高网页加载速度。</p><ol start="3"><li><p>使用合适的图片尺寸： 将图片调整为合适的尺寸也是一种优化图片的方法。使用原始图片尺寸展示一张小图会导致浪费带宽和加载时间，而将一张大图缩小展示会导致图片失真等问题。通过裁剪或调整图片尺寸，可以保持图片在网页上的展示效果，同时减小文件大小。</p></li><li><p>图片懒加载： 图片懒加载是一种延迟加载图片的技术，在页面滚动到可见范围时再进行图片加载。这种方式可以减少页面的初始加载时间和带宽占用，提高页面的响应速度。常见的图片懒加载库有LazyLoad和Intersection Observer API。</p></li><li><p>使用CSS精灵图或矢量图： CSS精灵图（CSS Sprite）是将多个小图标或图片合并成一张图片，并通过CSS的<code>background-image</code>和<code>background-position</code>属性进行展示。这样可以减少多个小图片的请求，提高加载速度。另外，使用矢量图形（如SVG）也可以减小文件大小，同时保持较高的视觉质量和缩放性能。</p></li></ol><p>总结起来，通过压缩图片、选择适当的图片格式、调整图片尺寸、懒加载和使用CSS精灵图或矢量图等方法，可以有效地优化网页中的图片，提高网页加载速度和用户体验。</p><h3 id="缓存和数据请求优化" tabindex="-1"><a class="header-anchor" href="#缓存和数据请求优化"><span>缓存和数据请求优化</span></a></h3><p>缓存和数据请求优化是在前端开发中常用的性能优化技术，可以减少服务器的负载和提高页面加载速度。</p><ol><li><p>浏览器缓存： 浏览器缓存是浏览器将网页资源（如HTML、CSS、JavaScript和图片等）保存在本地的一种机制。当浏览器再次请求相同的资源时，可以直接从本地缓存中获取，减少服务器的请求和数据传输。通过设置合适的缓存策略，可以控制资源的缓存时间和缓存行为，提高页面加载速度。常见的缓存策略包括设置Cache-Control头，通过使用ETag和Last-Modified来实现缓存验证等。</p></li><li><p>数据缓存： 除了浏览器缓存外，还可以在前端代码中手动实现数据缓存，将从服务器获取的数据保存在内存中或本地存储（如localStorage或sessionStorage）中。在后续需要使用相同数据的时候，可以直接从缓存中获取，减少重复的数据请求和服务器的负载。</p></li><li><p>减少请求次数： 通过合理的资源合并和压缩，可以减少页面中的请求数量，从而降低服务器的负载和提高页面加载速度。常见的优化方法包括合并多个CSS或JavaScript文件成一个文件，压缩CSS和JavaScript代码，使用雪碧图和矢量图等。另外，可以使用HTTP/2的多路复用特性，将多个请求合并在一个TCP连接中，减少请求的延迟。</p></li><li><p>数据请求优化： 在发送数据请求时，可以通过以下几种方式进行优化：</p></li></ol><ul><li>使用CDN（内容分发网络）：将静态资源部署到全球分布的CDN节点上，可以提供更快的访问速度和稳定性。</li><li>采用异步请求：使用异步请求（如Ajax）可以在后台发送请求，不影响页面的加载和渲染，提高用户体验。</li><li>使用分页和懒加载：对于大数据量的列表或图片资源，可以采用分页加载和懒加载的策略，仅在需要时请求和加载数据，减少不必要的数据传输和加载时间。</li><li>数据预取和预加载：根据用户的行为和页面展示的需求，提前请求和加载可能需要的数据，以提高用户体验。</li></ul><p>综上所述，缓存和数据请求优化是优化前端性能的关键技术。通过合理设置浏览器缓存和数据缓存，减少请求次数，优化数据请求等方法，可以提升页面加载速度，减轻服务器负载，提高用户体验。</p><h3 id="代码拆分和模块化" tabindex="-1"><a class="header-anchor" href="#代码拆分和模块化"><span>代码拆分和模块化</span></a></h3><p>代码拆分和模块化是一种组织和管理代码的方法，旨在提高代码的可维护性、可读性和可重用性。</p><ol><li>代码拆分： 代码拆分是将大型代码库或应用程序拆分为更小、更可管理的部分的过程。通过代码拆分，可以将复杂的功能划分为独立的模块、文件或组件，以便更好地组织和维护代码。常见的代码拆分方法包括：</li></ol><ul><li>文件拆分：将不同功能或不同模块的代码分别放入不同的文件中，方便代码阅读和维护。</li><li>组件拆分：根据UI组件的功能和复用性，将整个应用程序拆分为多个独立的组件，可独立开发和测试。</li><li>模块化拆分：将代码按照功能或逻辑进行模块化拆分，每个模块负责特定的功能，通过模块之间的接口交互和协作。</li></ul><p>通过代码拆分，可以改善代码的可读性、可维护性和可扩展性，减少代码间的依赖性，方便团队协作。</p><ol start="2"><li>模块化： 模块化是一种思想和实践，将代码划分为独立、可组合和可重用的模块。模块化的好处包括：</li></ol><ul><li>代码复用：通过将功能封装为模块，可以在不同的项目和场景中多次使用，减少重复开发的工作量。</li><li>维护性和可扩展性：模块的独立性使得修改和维护更加容易，且可以根据需求方便地添加、删除或替换模块。</li><li>可测试性：模块化的代码更容易进行单元测试，因为每个模块可以独立测试。</li></ul><p>在前端开发中，常见的模块化规范包括CommonJS、AMD（异步模块定义）、ES6模块等。模块化的实现可以借助模块加载器（如RequireJS、Webpack、Rollup等）或构建工具来管理依赖和编译模块化的代码。</p><p>模块化还有一种更高级的概念，即组件化。组件化是将模块化应用到用户界面（UI）开发中，将UI划分为独立、可重用的组件。通过组件化开发，可以实现UI在不同页面和应用中的复用，提高开发效率和UI一致性。</p><p>总结起来，代码拆分和模块化是一种组织和管理代码的方法。通过代码拆分，可以将复杂的代码库或应用程序划分为更小、更可管理的部分。而模块化则可以将代码划分为独立、可组合和可重用的模块，提高代码的可维护性和可重用性。</p><h3 id="使用web-workers" tabindex="-1"><a class="header-anchor" href="#使用web-workers"><span>使用Web Workers</span></a></h3><p>Web Workers是HTML5提供的一项技术，可以在浏览器中运行后台线程，以实现并行计算和在后台处理耗时任务，而不会阻塞主线程，提高页面的响应性。</p><ol><li>创建Web Worker： 首先，通过JavaScript代码创建一个Web Worker。可以使用以下方式创建一个Web Worker：</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 创建一个新的Web Worker</span>
<span class="token keyword">var</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token string">&#39;worker.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的<code>worker.js</code>是Web Worker的脚本文件。</p><ol start="2"><li>编写Web Worker脚本： 在上一步创建的Web Worker脚本文件（例如<code>worker.js</code>）中，编写需要在后台执行的任务代码。注意，Web Worker脚本中不能直接访问DOM元素，因为它在主线程之外执行。</li></ol><p>一个简单的Web Worker脚本示例：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// worker.js</span>

<span class="token comment">// 监听来自主线程的消息</span>
self<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 获取主线程传递的数据</span>
  <span class="token keyword">var</span> data <span class="token operator">=</span> event<span class="token punctuation">.</span>data<span class="token punctuation">;</span>

  <span class="token comment">// 在后台执行耗时任务</span>
  <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">timeConsumingTask</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 将处理结果发送回主线程</span>
  self<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 后台耗时任务</span>
<span class="token keyword">function</span> <span class="token function">timeConsumingTask</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 处理耗时任务...</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>主线程与Web Worker通信： 在主线程中，可以通过消息传递的方式与Web Worker进行通信。主线程可以向Web Worker发送消息，并接收来自Web Worker的响应。</li></ol><p>向Web Worker发送消息的示例：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 向Web Worker发送消息</span>
worker<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在Web Worker中，可以通过<code>self.onmessage</code>监听来自主线程的消息，并通过<code>self.postMessage</code>将结果发送回主线程。</p><ol start="4"><li>处理Web Worker的响应： 在主线程中，可以通过监听Web Worker的<code>message</code>事件来处理来自Web Worker的响应。</li></ol><p>处理Web Worker响应的示例：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 监听Web Worker的响应</span>
worker<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 获取Web Worker传递的数据</span>
  <span class="token keyword">var</span> result <span class="token operator">=</span> event<span class="token punctuation">.</span>data<span class="token punctuation">;</span>

  <span class="token comment">// 处理Web Worker的响应</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过Web Worker，可以将耗时的计算和处理任务移到后台线程中进行，从而不会阻塞主线程，提高页面的响应性能。但需要注意，由于Web Worker运行在另一个线程中，因此不能直接访问主线程的全局变量和DOM元素。如果需要与主线程进行通信，可以使用消息传递的方式。</p><h3 id="使用性能分析工具" tabindex="-1"><a class="header-anchor" href="#使用性能分析工具"><span>使用性能分析工具</span></a></h3><p>性能分析工具是开发者用来评估和改进应用程序性能的工具。它可以帮助开发者找到应用程序中的性能瓶颈，并提供有关代码执行、资源加载、网络请求等方面的详细信息。</p><ol><li>浏览器开发者工具： 现代的浏览器都提供了内置的开发者工具，其中包含了一些性能分析功能，常用的有以下几种：</li></ol><ul><li>Performance：提供了性能分析和时间线记录功能，可以查看应用程序的资源加载、代码执行、渲染时间等信息。</li><li>Network：用于分析网络请求和响应，包括请求时间、资源大小等。</li><li>Memory：用于分析内存使用情况，检测内存泄漏问题。</li></ul><p>通过打开浏览器开发者工具，可以在&quot;Performance&quot;或&quot;Network&quot;选项卡下进行性能分析，一般可以通过录制或刷新页面来开始分析过程。</p><ol start="2"><li>Lighthouse： Lighthouse是一个由Google开发的开源工具，可以对网站或Web应用进行综合性能评估，它会检查多个方面的性能指标，并提供改进建议。Lighthouse可以通过Chrome浏览器的开发者工具使用，也可以在命令行上使用。</li></ol><p>通过Chrome浏览器的开发者工具，选择&quot;Lighthouse&quot;选项卡，点击&quot;Generate report&quot;按钮即可生成性能评估报告。Lighthouse会评估网页的性能、可访问性、PWA特性等内容，并给出相应的分数和改进建议。</p><ol start="3"><li>WebPageTest： WebPageTest是一个基于云的性能分析工具，可以测试网页在不同地点和设备上的加载速度和性能，提供了更详细的性能指标和测试报告。你可以在WebPageTest网站上输入网页URL并选择测试配置，然后启动测试。</li></ol><p>测试完成后，WebPageTest将提供详细的性能指标、加载时间线、资源统计等信息，还可以和其他测试结果进行比较，以帮助开发者分析和优化性能。s</p>`,376),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","basic.html.vue"]]),d=JSON.parse('{"path":"/frame/react/core/basic.html","title":"react","lang":"zh-CN","frontmatter":{"title":"react","description":"react","keywords":"react","category":["框架","Web","react"],"tag":"react","head":[["meta",{"property":"og:url","content":"https://github.com/newNotes/frame/react/core/basic.html"}],["meta",{"property":"og:site_name","content":"ZY 学习笔记"}],["meta",{"property":"og:title","content":"react"}],["meta",{"property":"og:description","content":"react"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-23T14:28:05.000Z"}],["meta",{"property":"article:author","content":"flow-zy"}],["meta",{"property":"article:tag","content":"react"}],["meta",{"property":"article:modified_time","content":"2024-06-23T14:28:05.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"react\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-23T14:28:05.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"flow-zy\\",\\"url\\":\\"https://flow-zy.github.io/newNotes/\\"}]}"]]},"headers":[{"level":2,"title":"基础知识","slug":"基础知识","link":"#基础知识","children":[{"level":3,"title":"什么是React","slug":"什么是react","link":"#什么是react","children":[]},{"level":3,"title":"React的优点和特点","slug":"react的优点和特点","link":"#react的优点和特点","children":[]},{"level":3,"title":"React与其他前端框架的比较","slug":"react与其他前端框架的比较","link":"#react与其他前端框架的比较","children":[]},{"level":3,"title":"React的核心概念：组件、虚拟DOM、状态和属性等","slug":"react的核心概念-组件、虚拟dom、状态和属性等","link":"#react的核心概念-组件、虚拟dom、状态和属性等","children":[]}]},{"level":2,"title":"JSX语法","slug":"jsx语法","link":"#jsx语法","children":[{"level":3,"title":"什么是JSX","slug":"什么是jsx","link":"#什么是jsx","children":[]},{"level":3,"title":"JSX与HTML的区别","slug":"jsx与html的区别","link":"#jsx与html的区别","children":[]},{"level":3,"title":"JSX的基本语法规则","slug":"jsx的基本语法规则","link":"#jsx的基本语法规则","children":[]},{"level":3,"title":"使用JSX创建React元素","slug":"使用jsx创建react元素","link":"#使用jsx创建react元素","children":[]}]},{"level":2,"title":"组件","slug":"组件","link":"#组件","children":[{"level":3,"title":"函数组件和类组件的区别","slug":"函数组件和类组件的区别","link":"#函数组件和类组件的区别","children":[]},{"level":3,"title":"创建React组件的基本语法","slug":"创建react组件的基本语法","link":"#创建react组件的基本语法","children":[]},{"level":3,"title":"组件的状态（state）和属性（props）","slug":"组件的状态-state-和属性-props","link":"#组件的状态-state-和属性-props","children":[]},{"level":3,"title":"组件的渲染（rendering）","slug":"组件的渲染-rendering","link":"#组件的渲染-rendering","children":[]},{"level":3,"title":"组件的生命周期","slug":"组件的生命周期","link":"#组件的生命周期","children":[]},{"level":3,"title":"高阶组件（HOC）","slug":"高阶组件-hoc","link":"#高阶组件-hoc","children":[]}]},{"level":2,"title":"事件处理","slug":"事件处理","link":"#事件处理","children":[{"level":3,"title":"事件处理的基本概念","slug":"事件处理的基本概念","link":"#事件处理的基本概念","children":[]},{"level":3,"title":"绑定事件处理函数的方法","slug":"绑定事件处理函数的方法","link":"#绑定事件处理函数的方法","children":[]},{"level":3,"title":"事件对象和事件参数","slug":"事件对象和事件参数","link":"#事件对象和事件参数","children":[]},{"level":3,"title":"常见的事件类型","slug":"常见的事件类型","link":"#常见的事件类型","children":[]}]},{"level":2,"title":"表单","slug":"表单","link":"#表单","children":[{"level":3,"title":"表单元素的基本用法","slug":"表单元素的基本用法","link":"#表单元素的基本用法","children":[]},{"level":3,"title":"受控组件和非受控组件","slug":"受控组件和非受控组件","link":"#受控组件和非受控组件","children":[]},{"level":3,"title":"表单验证和错误处理","slug":"表单验证和错误处理","link":"#表单验证和错误处理","children":[]},{"level":3,"title":"处理表单提交","slug":"处理表单提交","link":"#处理表单提交","children":[]}]},{"level":2,"title":"组件通信","slug":"组件通信","link":"#组件通信","children":[{"level":3,"title":"父子组件通信","slug":"父子组件通信","link":"#父子组件通信","children":[]},{"level":3,"title":"属性传递","slug":"属性传递","link":"#属性传递","children":[]},{"level":3,"title":"上下文（Context）API","slug":"上下文-context-api","link":"#上下文-context-api","children":[]},{"level":3,"title":"发布订阅模式和事件总线","slug":"发布订阅模式和事件总线","link":"#发布订阅模式和事件总线","children":[]}]},{"level":2,"title":"Hooks","slug":"hooks","link":"#hooks","children":[{"level":3,"title":"什么是Hooks","slug":"什么是hooks","link":"#什么是hooks","children":[]},{"level":3,"title":"常用的Hooks函数：useState、useEffect等","slug":"常用的hooks函数-usestate、useeffect等","link":"#常用的hooks函数-usestate、useeffect等","children":[]},{"level":3,"title":"自定义Hooks","slug":"自定义hooks","link":"#自定义hooks","children":[]},{"level":3,"title":"Hooks的使用注意事项","slug":"hooks的使用注意事项","link":"#hooks的使用注意事项","children":[]}]},{"level":2,"title":"性能优化","slug":"性能优化","link":"#性能优化","children":[{"level":3,"title":"Virtual DOM的原理和优势","slug":"virtual-dom的原理和优势","link":"#virtual-dom的原理和优势","children":[]},{"level":3,"title":"使用key属性进行性能优化","slug":"使用key属性进行性能优化","link":"#使用key属性进行性能优化","children":[]},{"level":3,"title":"PureComponent和memo组件","slug":"purecomponent和memo组件","link":"#purecomponent和memo组件","children":[]},{"level":3,"title":"使用shouldComponentUpdate进行手动优化","slug":"使用shouldcomponentupdate进行手动优化","link":"#使用shouldcomponentupdate进行手动优化","children":[]},{"level":3,"title":"减少渲染次数","slug":"减少渲染次数","link":"#减少渲染次数","children":[]},{"level":3,"title":"使用生命周期方法和Effect钩子进行异步加载","slug":"使用生命周期方法和effect钩子进行异步加载","link":"#使用生命周期方法和effect钩子进行异步加载","children":[]},{"level":3,"title":"懒加载和按需加载","slug":"懒加载和按需加载","link":"#懒加载和按需加载","children":[]},{"level":3,"title":"使用Memoized函数和记忆化技术","slug":"使用memoized函数和记忆化技术","link":"#使用memoized函数和记忆化技术","children":[]},{"level":3,"title":"使用分页和虚拟滚动","slug":"使用分页和虚拟滚动","link":"#使用分页和虚拟滚动","children":[]},{"level":3,"title":"图片优化","slug":"图片优化","link":"#图片优化","children":[]},{"level":3,"title":"缓存和数据请求优化","slug":"缓存和数据请求优化","link":"#缓存和数据请求优化","children":[]},{"level":3,"title":"代码拆分和模块化","slug":"代码拆分和模块化","link":"#代码拆分和模块化","children":[]},{"level":3,"title":"使用Web Workers","slug":"使用web-workers","link":"#使用web-workers","children":[]},{"level":3,"title":"使用性能分析工具","slug":"使用性能分析工具","link":"#使用性能分析工具","children":[]}]}],"git":{"createdTime":1719152885000,"updatedTime":1719152885000,"contributors":[{"name":"overflow_z","email":"wz19121@eyeah.net","commits":1}]},"readingTime":{"minutes":78.9,"words":23670},"filePathRelative":"frame/react/core/basic.md","localizedDate":"2024年6月23日","excerpt":"<h2>基础知识</h2>\\n<h3>什么是React</h3>\\n<p>React是一个由Facebook开发的用于构建用户界面的JavaScript库。它是一个采用组件化开发思想的库，通过将页面拆分成多个可复用的组件，可以更方便地开发大规模、高性能的Web应用程序。</p>\\n<p>React使用了虚拟DOM（Virtual DOM）的概念，它将页面的状态映射到组件树，并将变化的部分与实际的DOM进行对比，最终只更新需要变化的部分，以提高性能和降低资源消耗。</p>\\n<p>React具有以下特点：</p>\\n<ol>\\n<li>\\n<p>组件化开发：React将页面拆分成多个可复用和独立的组件，每个组件负责管理自己的状态和渲染逻辑，便于开发和维护复杂的UI界面。</p>\\n</li>\\n<li>\\n<p>声明式编程：通过使用JSX语法，开发人员可以以声明式的方式描述UI的外观和行为，React会根据声明的规则自动更新界面，无需手动操作DOM。</p>\\n</li>\\n<li>\\n<p>单向数据流：React中的数据流是单向的，从父组件传递给子组件，子组件通过props接收数据，保证了数据的可追踪性和可维护性。</p>\\n</li>\\n<li>\\n<p>高性能：React通过使用虚拟DOM和高效的DOM Diff算法，只更新变化的部分，减少了对实际DOM的操作次数，提高了性能。</p>\\n</li>\\n<li>\\n<p>生态系统丰富：React拥有庞大的生态系统，包括React Router用于处理路由、Redux和Mobx等状态管理库、React Native用于开发移动应用等，可以扩展React的功能和适用领域。</p>\\n</li>\\n</ol>"}');export{r as comp,d as data};
