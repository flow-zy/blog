import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,f as t}from"./app-BfzwvKLN.js";const e={},p=t(`<h2 id="模块化" tabindex="-1"><a class="header-anchor" href="#模块化"><span>模块化</span></a></h2><p>模块化是一种将代码拆分为独立的功能单元并进行组织的编程概念。它使代码更易于维护、测试和重用，并提供了更好的代码组织和封装。</p><p>在JavaScript中，有多种模块化的实现方式。下面介绍两种常用的模块化方案：</p><h3 id="commonjs模块化" tabindex="-1"><a class="header-anchor" href="#commonjs模块化"><span>CommonJS模块化</span></a></h3><p>CommonJS模块化是一种用于服务器端和非浏览器环境的模块化规范，广泛用于Node.js生态系统中。它提供了一种简单且易于使用的模块化方案，用于组织、导入和导出模块的内容。</p><p>在CommonJS模块化中，每个模块都有独立的作用域，模块之间通过<code>require</code>关键字导入依赖关系，使用<code>module.exports</code>或<code>exports</code>关键字导出模块的内容。</p><p>下面是使用CommonJS模块化的示例：</p><p>导出模块内容：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// calculator.js</span>
<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">subtract</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  add<span class="token punctuation">,</span>
  subtract
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述示例中，使用<code>module.exports</code>将<code>add</code>和<code>subtract</code>函数作为一个对象导出。</p><p>导入模块内容：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// index.js</span>
<span class="token keyword">const</span> calculator <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./calculator&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>calculator<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 5</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>calculator<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述示例中，通过<code>require</code>关键字导入<code>calculator.js</code>模块的内容，并将其赋值给变量<code>calculator</code>，然后就可以使用导入的模块内容。</p><p>CommonJS模块化的特点和优势包括：</p><ol><li><p>简单易用：CommonJS模块化规范非常简单，容易上手和理解，无需额外的构建工具就可以直接使用。</p></li><li><p>动态导入：CommonJS模块支持在运行时动态导入模块，可以根据需要异步加载依赖的模块。</p></li><li><p>同步加载：默认情况下，CommonJS模块是同步加载的，模块中的代码会立即执行并导出结果。</p></li><li><p>适用于服务器端：CommonJS模块化最初是为服务器端开发而设计，适用于在Node.js中使用，方便管理服务器端的模块依赖和代码复用。</p></li></ol><p>CommonJS模块化一般用于服务器端开发和构建工具中，而在浏览器端，通常使用ES6模块化或其他前端打包工具进行模块化开发。</p><p>CommonJS模块化提供了一种简单和常用的模块化方案，对于开发Node.js应用程序和构建工具来说非常实用。然而，在前端开发中，尤其是现代前端开发，ES6模块化已成为主流，并提供了更丰富和强大的模块化功能和语法。</p><h3 id="es模块化" tabindex="-1"><a class="header-anchor" href="#es模块化"><span>ES模块化</span></a></h3><p>ES6模块化是JavaScript的官方模块化标准，在现代浏览器和各种JavaScript环境中广泛支持。它提供了一种简洁而强大的模块化语法，用于组织、导入和导出模块的内容。</p><p>ES6模块使用<code>import</code>和<code>export</code>关键字来导入和导出模块。下面是使用ES6模块化的示例：</p><p>导出模块内容：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// calculator.js</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">subtract</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>导入模块内容：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// index.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> add<span class="token punctuation">,</span> subtract <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./calculator&#39;</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 5</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">subtract</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ES6模块化的特点和优势包括：</p><ol><li><p>显式导入和导出：使用<code>import</code>和<code>export</code>关键字可以清晰地指定要导入和导出的模块内容，使得代码更具可读性和可理解性。</p></li><li><p>块级作用域：每个模块都有自己的作用域，模块中的变量和函数默认是在模块内部作用域中，不会污染全局作用域。</p></li><li><p>异步加载：ES6模块支持运行时动态加载模块，可以根据需要异步加载依赖的模块，提高性能和加载速度。</p></li><li><p>静态解析：ES6模块在编译阶段就可以确定模块的依赖关系，使得编译器可以进行静态优化和分析，提供更好的工具支持和开发体验。</p></li></ol><p>ES6模块化在浏览器中的使用需要使用<code>&lt;script type=&quot;module&quot;&gt;</code>标签将脚本文件标记为模块。</p><p>当使用ES6模块化时，可以根据具体项目和需求，灵活选择合适的打包工具（如Webpack、Rollup等）来将模块打包为可在浏览器中运行的代码。这样可以更好地管理模块依赖和优化项目的性能。</p><p>ES6模块化提供了一种强大且标准的方式来开发和组织JavaScript代码，它已成为现代前端开发的主流模块化方案，推荐在项目中使用。</p><h4 id="用法" tabindex="-1"><a class="header-anchor" href="#用法"><span>用法</span></a></h4><ol><li>默认导出和导入： 除了通过<code>export</code>和<code>import</code>关键字导入和导出具名的模块内容，ES6模块化还支持默认导出和导入。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// calculator.js</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// index.js</span>
<span class="token keyword">import</span> add <span class="token keyword">from</span> <span class="token string">&#39;./calculator&#39;</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述示例中，<code>export default</code>语法用于导出默认的模块内容，而<code>import add from &#39;./calculator&#39;</code>语法用于导入默认导出的内容。</p><ol start="2"><li>导入整个模块： 除了按需导入具名的模块内容，ES6模块化还支持导入整个模块。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// calculator.js</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">subtract</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// index.js</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> calculator <span class="token keyword">from</span> <span class="token string">&#39;./calculator&#39;</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>calculator<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 5</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>calculator<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述示例中，<code>import * as calculator from &#39;./calculator&#39;</code>语法用于将整个模块导入到变量<code>calculator</code>中，我们可以通过该变量访问模块中的所有导出内容。</p><ol start="3"><li>重命名导入和导出： 如果导入的模块内容在当前模块中有命名冲突，可以使用<code>as</code>关键字进行重命名。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// calculator.js</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// index.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> add <span class="token keyword">as</span> addition <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./calculator&#39;</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">addition</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述示例中，通过<code>import { add as addition }</code>语法将<code>add</code>函数导入，并将导入的函数重命名为<code>addition</code>，以避免与当前模块中的同名变量冲突。</p><ol start="4"><li>动态导入： ES6模块化支持使用<code>import()</code>函数进行动态导入，可以在运行时根据需要异步加载模块。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// index.js</span>
<span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./calculator&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">calculatorModule</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>calculatorModule<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 5</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述示例中，通过<code>import(&#39;./calculator&#39;)</code>语法返回一个Promise，我们可以通过<code>then</code>方法获取导入的模块，并在模块加载完成后使用模块的导出内容。</p><p>动态导入对于按需加载模块或根据条件加载模块非常有用，可以提高应用的性能和资源利用率。</p><ol start="5"><li>嵌套导入和导出： ES6模块化允许在一个模块中嵌套导入和导出其他模块内容。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// math.js</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span> add<span class="token punctuation">,</span> subtract <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./calculator&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span> multiply<span class="token punctuation">,</span> divide <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./calculator&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述示例中，<code>math.js</code>模块中同时导入和导出了<code>calculator.js</code>模块中的多个函数。</p><ol start="6"><li>导入并执行模块： ES6模块化允许导入并执行其他模块中的代码。这在需要在导入时执行某些初始化逻辑的情况下非常有用。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// app.js</span>
<span class="token keyword">import</span> <span class="token string">&#39;./initialize&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// initialize.js</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Initializing...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 输出: Initializing...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述示例中，<code>app.js</code>模块导入了<code>initialize.js</code>模块，导入时会立即执行<code>initialize.js</code>模块中的代码。</p><h3 id="commonjs和es模块的区别" tabindex="-1"><a class="header-anchor" href="#commonjs和es模块的区别"><span>CommonJs和ES模块的区别</span></a></h3><ol><li><p>语法差异：</p><ul><li>CommonJS采用<code>require</code>和<code>module.exports</code>关键字进行模块的导入和导出。</li><li>ES模块化采用<code>import</code>和<code>export</code>关键字进行模块的导入和导出。</li></ul></li><li><p>加载时机：</p><ul><li>CommonJS模块是同步加载的，模块中的代码会立即执行并导出结果。</li><li>ES模块化支持编译时静态分析，模块的导入和导出在编译阶段就可以确定，并且支持异步加载。</li></ul></li><li><p>作用域：</p><ul><li>CommonJS模块的导入和导出都是值拷贝，每次导入会生成一个新的拷贝。</li><li>ES模块化采用的是实时绑定，导入的模块指向原始的引用，保持了引用的一致性。</li></ul></li><li><p>动态导入：</p><ul><li>CommonJS模块化不直接支持动态导入，只能在运行时通过<code>require</code>动态加载模块。</li><li>ES模块化支持使用<code>import()</code>函数进行动态导入，可以在运行时根据需要异步加载模块。</li></ul></li><li><p>浏览器兼容性：</p><ul><li>CommonJS模块化最初是为服务器端开发而设计，不直接适用于浏览器环境。但在使用构建工具（如Browserify、Webpack等）的帮助下，可以在浏览器中使用CommonJS模块化。</li><li>ES模块化是JavaScript的官方模块化标准，现代浏览器原生支持ES模块化，无需额外的构建工具。可以直接在浏览器中使用<code>&lt;script type=&quot;module&quot;&gt;</code>标签加载和运行ES模块。</li></ul></li><li><p>开发语法：</p><ul><li>CommonJS模块化的语法设计比较简洁，容易上手，可以直接在Node.js环境中使用。</li><li>ES模块化的语法更加丰富和强大，提供了更多的特性和灵活性，对于现代前端开发非常有用。</li></ul></li></ol><p>CommonJS模块化适用于服务器端和构建工具，而ES模块化适用于现代前端开发，在浏览器中具有原生支持。使用哪种模块化取决于项目的需求和环境，可以根据具体情况选择最合适的模块化方案。在实际开发中，常见的做法是使用构建工具（如Webpack、Rollup等）来处理模块化代码，使得CommonJS模块和ES模块能够共存和互相转换。</p>`,52),o=[p];function c(l,i){return s(),a("div",null,o)}const r=n(e,[["render",c],["__file","module.html.vue"]]),k=JSON.parse('{"path":"/js/es/module.html","title":"模块化","lang":"zh-CN","frontmatter":{"title":"模块化","icon":"module","category":"JavaScript","order":20,"description":"模块化 模块化是一种将代码拆分为独立的功能单元并进行组织的编程概念。它使代码更易于维护、测试和重用，并提供了更好的代码组织和封装。 在JavaScript中，有多种模块化的实现方式。下面介绍两种常用的模块化方案： CommonJS模块化 CommonJS模块化是一种用于服务器端和非浏览器环境的模块化规范，广泛用于Node.js生态系统中。它提供了一种简...","head":[["meta",{"property":"og:url","content":"https://github.com/blog/js/es/module.html"}],["meta",{"property":"og:site_name","content":"ZY 学习笔记"}],["meta",{"property":"og:title","content":"模块化"}],["meta",{"property":"og:description","content":"模块化 模块化是一种将代码拆分为独立的功能单元并进行组织的编程概念。它使代码更易于维护、测试和重用，并提供了更好的代码组织和封装。 在JavaScript中，有多种模块化的实现方式。下面介绍两种常用的模块化方案： CommonJS模块化 CommonJS模块化是一种用于服务器端和非浏览器环境的模块化规范，广泛用于Node.js生态系统中。它提供了一种简..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-23T14:28:05.000Z"}],["meta",{"property":"article:author","content":"flow-zy"}],["meta",{"property":"article:modified_time","content":"2024-06-23T14:28:05.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"模块化\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-23T14:28:05.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"flow-zy\\",\\"url\\":\\"https://flow-zy.github.io/newNotes/\\"}]}"]]},"headers":[{"level":2,"title":"模块化","slug":"模块化","link":"#模块化","children":[{"level":3,"title":"CommonJS模块化","slug":"commonjs模块化","link":"#commonjs模块化","children":[]},{"level":3,"title":"ES模块化","slug":"es模块化","link":"#es模块化","children":[]},{"level":3,"title":"CommonJs和ES模块的区别","slug":"commonjs和es模块的区别","link":"#commonjs和es模块的区别","children":[]}]}],"git":{"createdTime":1719152885000,"updatedTime":1719152885000,"contributors":[{"name":"overflow_z","email":"wz19121@eyeah.net","commits":1}]},"readingTime":{"minutes":8.03,"words":2410},"filePathRelative":"js/es/module.md","localizedDate":"2024年6月23日","excerpt":"<h2>模块化</h2>\\n<p>模块化是一种将代码拆分为独立的功能单元并进行组织的编程概念。它使代码更易于维护、测试和重用，并提供了更好的代码组织和封装。</p>\\n<p>在JavaScript中，有多种模块化的实现方式。下面介绍两种常用的模块化方案：</p>\\n<h3>CommonJS模块化</h3>\\n<p>CommonJS模块化是一种用于服务器端和非浏览器环境的模块化规范，广泛用于Node.js生态系统中。它提供了一种简单且易于使用的模块化方案，用于组织、导入和导出模块的内容。</p>\\n<p>在CommonJS模块化中，每个模块都有独立的作用域，模块之间通过<code>require</code>关键字导入依赖关系，使用<code>module.exports</code>或<code>exports</code>关键字导出模块的内容。</p>","autoDesc":true}');export{r as comp,k as data};
