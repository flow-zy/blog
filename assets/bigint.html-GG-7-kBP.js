import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,f as t}from"./app-D__VP-01.js";const p={},o=t(`<div class="hint-container tip"><p class="hint-container-title">提示</p><p>ES6引入了BigInt类型，用于表示超过JavaScript数字范围的整数。</p></div><ol><li><p>BigInt简介：</p><ul><li>JavaScript中的Number类型有一个固定的范围，超出这个范围的整数将无法精确表示。</li><li>BigInt类型解决了这个问题，可以表示任意大的整数。</li></ul></li><li><p>创建BigInt：</p><ul><li>在整数后面加上<code>n</code>或者调用<code>BigInt()</code>构造函数可以创建一个BigInt值。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> bigIntNum <span class="token operator">=</span> <span class="token number">123456789012345678901234567890n</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> anotherBigIntNum <span class="token operator">=</span> <span class="token function">BigInt</span><span class="token punctuation">(</span><span class="token string">&quot;123456789012345678901234567890&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>运算符和方法：</p><ul><li>BigInt类型可以使用大多数运算符和内置方法进行操作，包括加减乘除、取余、指数运算等。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> num1 <span class="token operator">=</span> <span class="token number">10n</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> num2 <span class="token operator">=</span> <span class="token number">5n</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num1 <span class="token operator">+</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 15n</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num1 <span class="token operator">-</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5n</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num1 <span class="token operator">*</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 50n</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num1 <span class="token operator">/</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2n</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num1 <span class="token operator">%</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0n</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num1 <span class="token operator">**</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 100000n</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>注意事项：</p><ul><li>BigInt和Number类型不能直接进行混合运算，需要通过<code>BigInt()</code>函数进行转换。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> bigIntNum <span class="token operator">=</span> <span class="token number">12345678901234567890n</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> regularNum <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bigIntNum <span class="token operator">+</span> <span class="token function">BigInt</span><span class="token punctuation">(</span>regularNum<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 12345678901234567890n + 20n = 12345678901234567910n</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>类型转换：</p><ul><li>BigInt可以通过<code>toString()</code>方法转换为字符串，也可以通过<code>Number()</code>函数将其转换为Number类型，但超出Number范围的BigInt会被转换为Infinity。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> bigIntNum <span class="token operator">=</span> <span class="token number">1234567890n</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bigIntNum<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;1234567890&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>bigIntNum<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1.23456789e+9</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>比较运算：</p><ul><li>BigInt类型可以使用相等运算符（<code>==</code>、<code>===</code>）进行比较，不同类型的比较结果可能为false。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> bigIntNum <span class="token operator">=</span> <span class="token number">100n</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> regularNum <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bigIntNum <span class="token operator">==</span> regularNum<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bigIntNum <span class="token operator">===</span> regularNum<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol>`,2),e=[o];function c(l,i){return s(),a("div",null,e)}const k=n(p,[["render",c],["__file","bigint.html.vue"]]),d=JSON.parse('{"path":"/js/es/bigint.html","title":"Bigint 类型","lang":"zh-CN","frontmatter":{"title":"Bigint 类型","icon":"bigint","category":"JavaScript","order":13,"description":"提示 ES6引入了BigInt类型，用于表示超过JavaScript数字范围的整数。 BigInt简介： JavaScript中的Number类型有一个固定的范围，超出这个范围的整数将无法精确表示。 BigInt类型解决了这个问题，可以表示任意大的整数。 创建BigInt： 在整数后面加上n或者调用BigInt()构造函数可以创建一个BigInt值。 ...","head":[["meta",{"property":"og:url","content":"https://github.com/blog/js/es/bigint.html"}],["meta",{"property":"og:site_name","content":"ZY 学习笔记"}],["meta",{"property":"og:title","content":"Bigint 类型"}],["meta",{"property":"og:description","content":"提示 ES6引入了BigInt类型，用于表示超过JavaScript数字范围的整数。 BigInt简介： JavaScript中的Number类型有一个固定的范围，超出这个范围的整数将无法精确表示。 BigInt类型解决了这个问题，可以表示任意大的整数。 创建BigInt： 在整数后面加上n或者调用BigInt()构造函数可以创建一个BigInt值。 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-23T14:28:05.000Z"}],["meta",{"property":"article:author","content":"flow-zy"}],["meta",{"property":"article:modified_time","content":"2024-06-23T14:28:05.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Bigint 类型\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-23T14:28:05.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"flow-zy\\",\\"url\\":\\"https://flow-zy.github.io/newNotes/\\"}]}"]]},"headers":[],"git":{"createdTime":1719152885000,"updatedTime":1719152885000,"contributors":[{"name":"overflow_z","email":"wz19121@eyeah.net","commits":1}]},"readingTime":{"minutes":1.21,"words":363},"filePathRelative":"js/es/bigint.md","localizedDate":"2024年6月23日","excerpt":"<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">提示</p>\\n<p>ES6引入了BigInt类型，用于表示超过JavaScript数字范围的整数。</p>\\n</div>\\n<ol>\\n<li>\\n<p>BigInt简介：</p>\\n<ul>\\n<li>JavaScript中的Number类型有一个固定的范围，超出这个范围的整数将无法精确表示。</li>\\n<li>BigInt类型解决了这个问题，可以表示任意大的整数。</li>\\n</ul>\\n</li>\\n<li>\\n<p>创建BigInt：</p>\\n<ul>\\n<li>在整数后面加上<code>n</code>或者调用<code>BigInt()</code>构造函数可以创建一个BigInt值。</li>\\n</ul>\\n<div class=\\"language-javascript\\" data-ext=\\"js\\" data-title=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">const</span> bigIntNum <span class=\\"token operator\\">=</span> <span class=\\"token number\\">123456789012345678901234567890n</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">const</span> anotherBigIntNum <span class=\\"token operator\\">=</span> <span class=\\"token function\\">BigInt</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"123456789012345678901234567890\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div></li>\\n<li>\\n<p>运算符和方法：</p>\\n<ul>\\n<li>BigInt类型可以使用大多数运算符和内置方法进行操作，包括加减乘除、取余、指数运算等。</li>\\n</ul>\\n<div class=\\"language-javascript\\" data-ext=\\"js\\" data-title=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">const</span> num1 <span class=\\"token operator\\">=</span> <span class=\\"token number\\">10n</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">const</span> num2 <span class=\\"token operator\\">=</span> <span class=\\"token number\\">5n</span><span class=\\"token punctuation\\">;</span>\\n\\nconsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>num1 <span class=\\"token operator\\">+</span> num2<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 15n</span>\\nconsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>num1 <span class=\\"token operator\\">-</span> num2<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 5n</span>\\nconsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>num1 <span class=\\"token operator\\">*</span> num2<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 50n</span>\\nconsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>num1 <span class=\\"token operator\\">/</span> num2<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 2n</span>\\nconsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>num1 <span class=\\"token operator\\">%</span> num2<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 0n</span>\\nconsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>num1 <span class=\\"token operator\\">**</span> num2<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 100000n</span>\\n</code></pre></div></li>\\n<li>\\n<p>注意事项：</p>\\n<ul>\\n<li>BigInt和Number类型不能直接进行混合运算，需要通过<code>BigInt()</code>函数进行转换。</li>\\n</ul>\\n<div class=\\"language-javascript\\" data-ext=\\"js\\" data-title=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">const</span> bigIntNum <span class=\\"token operator\\">=</span> <span class=\\"token number\\">12345678901234567890n</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">const</span> regularNum <span class=\\"token operator\\">=</span> <span class=\\"token number\\">20</span><span class=\\"token punctuation\\">;</span>\\n\\nconsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>bigIntNum <span class=\\"token operator\\">+</span> <span class=\\"token function\\">BigInt</span><span class=\\"token punctuation\\">(</span>regularNum<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 12345678901234567890n + 20n = 12345678901234567910n</span>\\n</code></pre></div></li>\\n<li>\\n<p>类型转换：</p>\\n<ul>\\n<li>BigInt可以通过<code>toString()</code>方法转换为字符串，也可以通过<code>Number()</code>函数将其转换为Number类型，但超出Number范围的BigInt会被转换为Infinity。</li>\\n</ul>\\n<div class=\\"language-javascript\\" data-ext=\\"js\\" data-title=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">const</span> bigIntNum <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1234567890n</span><span class=\\"token punctuation\\">;</span>\\n\\nconsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>bigIntNum<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toString</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// \\"1234567890\\"</span>\\nconsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token function\\">Number</span><span class=\\"token punctuation\\">(</span>bigIntNum<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 1.23456789e+9</span>\\n</code></pre></div></li>\\n<li>\\n<p>比较运算：</p>\\n<ul>\\n<li>BigInt类型可以使用相等运算符（<code>==</code>、<code>===</code>）进行比较，不同类型的比较结果可能为false。</li>\\n</ul>\\n<div class=\\"language-javascript\\" data-ext=\\"js\\" data-title=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">const</span> bigIntNum <span class=\\"token operator\\">=</span> <span class=\\"token number\\">100n</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">const</span> regularNum <span class=\\"token operator\\">=</span> <span class=\\"token number\\">100</span><span class=\\"token punctuation\\">;</span>\\n\\nconsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>bigIntNum <span class=\\"token operator\\">==</span> regularNum<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// true</span>\\nconsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>bigIntNum <span class=\\"token operator\\">===</span> regularNum<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// false</span>\\n</code></pre></div></li>\\n</ol>","autoDesc":true}');export{k as comp,d as data};
